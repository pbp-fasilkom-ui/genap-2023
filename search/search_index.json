{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":[" "]},"docs":[{"location":"","title":"Beranda","text":"<p>Selamat datang di Pemrograman Berbasis Platform Semester Genap 2022/2023. Halaman di akan memuat informasi terkait dengan perkuliahan. Informasi mengenai tutorial, lab, dan tugas lainnya akan di-publish secara berkala di situs web ini. Harap untuk sering mengecek halaman ini.</p>"},{"location":"#dosen","title":"Dosen","text":"<p>Arawinda Dinakaramani, S.Kom., M.Hum.</p>"},{"location":"#asisten-dosen","title":"Asisten Dosen","text":"<ol> <li>Muhammad Athallah (LAH) - Koordinator Asisten Dosen</li> <li>Muhammad Iqbal Dwitama (MID)</li> </ol>"},{"location":"proyek/pas/","title":"Proyek Akhir Semester PBP","text":"<p>Membuat Aplikasi Mobile menggunakan Framework Flutter secara Berkelompok</p>"},{"location":"proyek/pas/#tujuan-pembelajaran-khusus","title":"Tujuan Pembelajaran Khusus","text":"<ul> <li>Mengimplementasikan aplikasi mobile sederhana dengan framework Flutter</li> <li>Menerapkan widget untuk layout dan input, event handling, dan pemanggilan asinkronus ke web service</li> <li>Melakukan deployment aplikasi pada platform cloud dan perangkat mobile</li> </ul>"},{"location":"proyek/pas/#aturan-umum-tugas-kelompok","title":"Aturan Umum Tugas Kelompok","text":"<ol> <li>Satu kelompok membuat satu repositori git yang digunakan oleh seluruh anggota kelompok untuk bekerja sama. Kumpulkan tautan repositori git ke Scele,</li> <li>Repositori git memuat README.md yang berisi:<ul> <li>Nama anggota kelompok.</li> <li>Deskripsi aplikasi (nama dan fungsi aplikasi serta peran/aktor pengguna aplikasi).</li> <li>Daftar fitur/modul yang diimplementasikan beserta pembagian kerja per anggota.</li> <li>Alur pengintegrasian dengan web service untuk terhubung dengan aplikasi web yang sudah dibuat saat Proyek Tengah Semester.</li> <li>Tautan APK; tidak harus ada pada saat Tahap I. Tautan APK dapat ditambahkan belakangan ke README.md setelah selesai mengerjakan Tahap II.</li> </ul> </li> <li>Deployment aplikasi<ul> <li>Build dan rilis aplikasi ke GitHub (sebagai Release) dan platform cloud (Firebase App Distribution atau Microsoft App Center) menggunakan GitHub Actions.</li> <li>Gunakan logo aplikasi Anda sendiri.</li> </ul> </li> </ol>"},{"location":"proyek/pas/#aturan-khusus-per-anggota-kelompok","title":"Aturan Khusus per Anggota Kelompok","text":"<p>Setiap anggota kelompok wajib mengimplementasikan sebuah modul.</p> <ol> <li>Menerapkan widget untuk layout dan input (<code>Material</code> atau <code>Cupertino</code>, sesuai integrasi kelompok masing-masing).</li> <li>Menerapkan event handling.</li> <li>Menerapkan pemanggilan asinkronus ke web service Django (aplikasi web yang sudah dibuat saat Proyek Tengah Semester).</li> <li>Pengolahan data JSON yang menjadi respons dari web service Django dan menampilkan hasilnya di aplikasi mobile.</li> </ol>"},{"location":"proyek/pas/#tahapan-tugas-kelompok","title":"Tahapan Tugas Kelompok","text":"Tahapan dan deliverables Tenggat Waktu dan Keterangan Tahap I (30%) <ul> <li>Pembuatan GitHub kelompok</li> <li>Pembuatan codebase kelompok</li> <li>README.md pada GitHub yang berisi:</li> <ol> <li>Nama-nama anggota kelompok</li> <li>Deskripsi aplikasi (nama dan fungsi aplikasi serta peran/aktor pengguna aplikasi)</li> <li>Daftar fitur/modul yang diimplementasikan beserta pembagian kerja per anggota</li> <li>Alur pengintegrasian dengan web service untuk terhubung dengan aplikasi web yang sudah dibuat saat Proyek Tengah Semester</li> </ol> </ul> Tenggat Waktu: Senin, 14 Mei 2023, pukul 23:55 WIB Kumpulkan tautan GitHub dengan code base dan file <code>README.md</code> yang sudah disiapkan secara lengkap ke Scele.              <p>Kriteria Submisi: Terdapat file <code>README.md</code> beserta code base pada repositori GitHub</p> Tahap II (70%) <p>(Modul sudah terimplementasi dengan baik)</p> <ul> <li>Fungsionalitas sesuai dengan rancangan desain</li> <li>Tiap individu menyelesaikan penerapan widget pada fitur masing-masing</li> <li>Integrasi antaranggota kelompok sudah dalam satu kesatuan aplikasi</li> <li>Menambahkan tautan APK ke <code>README.md</code></li> </ul> Tenggat Waktu: Senin, 31 Mei 2023, pukul 23:55 WIB Demonstrasi dilakukan pada periode UAS <p>Kriteria Submisi: APK release di GitHub dan platform cloud (Firebase App Distribution atau Microsoft App Center)</p>"},{"location":"proyek/pts/","title":"Proyek Tengah Semester","text":"<p>Membuat Situs Web menggunakan Framework Django secara Berkelompok</p>"},{"location":"proyek/pts/#tujuan-pembelajaran-khusus","title":"Tujuan Pembelajaran Khusus","text":"<ul> <li>Merancang halaman web</li> <li>Mengimplementasikan situs web dengan framework Django dengan memenuhi models, views, dan templates</li> <li>Memanfaatkan framework CSS untuk mewujudkan responsive web design</li> <li>Mengimplementasikan unit test dan deployment (bonus)</li> </ul>"},{"location":"proyek/pts/#catatan","title":"Catatan","text":"<p>Perlu diperhatikan bahwa selain tujuan pembelajaran khusus seperti yang tertulis di atas, peserta kuliah juga perlu mempelajari dan dilatih beberapa aspek kecendekiaan sebagai calon sarjana. Di antaranya yang relevan dalam kuliah ini adalah keteguhan (grit), kemandirian, ketelitian, termasuk juga metakognitif (secara sederhana bisa diartikan kemampuan mengatur strategi belajar yang sesuai dengan dirinya meliputi perencanaan, pengawasan dan evaluasi proses belajar mandiri), termasuk di dalamnya kemampuan untuk memahami, mengomunikasikan masalah, diskusi dan bertanya sehingga peserta kuliah juga perlu siap bersikap positif dengan kondisi-kondisi yang secara tidak langsung atau tidak pasti akan dihadapi dan mungkin dapat menghabiskan banyak waktu. Kondisi tersebut bisa dianggap kendala, seperti keterbatasan sumber daya, bug tools, kesulitan teknis atau lainnya. Walaupun dirasakan menyulitkan, perlu diupayakan untuk disikapi dengan positif agar dapat menjadi manfaat terkait aspek kecendekiaan yang perlu dilatih peserta kuliah. Sikap negatif hanya akan memperburuk keadaan dan menghilangkan manfaat tugas ini untuk pembelajaran yang akan dapat dirasakan di kemudian hari. Tim asisten dan dosen melalui sarana yang ada, akan berusaha semampunya melayani pertanyaan, keluhan, dan membantu proses pembelajaran peserta agar peserta bisa menjalani perkuliahan dan belajar semaksimal mungkin.</p> <p>Sebagai selingan, bila rekan-rekan lelah dan bingung menghadapi error yang belum kunjung terselesaikan, berikut ini ada video yang cukup populer dan mudah-mudahan bisa menambah semangat untuk tetap teguh mengerjakan dan berlatih demi kesuksesan di kemudian hari.</p> <p>Selamat mengerjakan. \ud83d\ude03</p>"},{"location":"proyek/pts/#aturan-umum-tugas-kelompok","title":"Aturan Umum Tugas Kelompok","text":"<ol> <li>Satu kelompok terdiri atas 5-6 orang. Pembagian kelompok dapat dilihat di SCELE.</li> <li>Satu kelompok membuat satu repositori git yang digunakan oleh seluruh anggota kelompok untuk bekerja sama. Kumpulkan tautan repositori git ke SCELE.</li> <li>Setiap kelompok dipersilakan mencari ide sendiri mengenai aplikasi yang akan dibuat. Mahasiswa dapat berdiskusi dengan anggota kelompok dan berkonsultasi dengan asisten dosen untuk menentukan ide aplikasi yang akan dibuat.</li> <li>Setiap anggota kelompok mengerjakan modul yang berbeda. Modul ditentukan oleh kelompok yang disesuaikan dengan ide aplikasi yang sudah didiskusikan dalam kelompok.</li> <li>Tugas kelompok di-deploy sebagai kesatuan aplikasi web dalam satu Railway app.</li> </ol>"},{"location":"proyek/pts/#aturan-khusus-per-anggota-kelompok","title":"Aturan Khusus per Anggota Kelompok","text":"<p>Setiap anggota kelompok wajib mengimplementasikan sebuah modul.</p> <ol> <li>Menerapkan models dengan membuat, memanfaatkan yang sudah disediakan Django, atau memanfaatkan yang sudah dibuat oleh anggota kelompok (pada modul lain).</li> <li>Menerapkan views untuk memproses request dan mengolah data untuk menghasilkan respons menggunakan templat HTML maupun mengembalikan respon JSON.</li> <li>Menerapkan templat menggunakan responsive framework (seperti Bootstrap dan Tailwind).</li> <li>Memiliki halaman form yang dapat menerima masukan dari pengguna kemudian diproses oleh views. Contoh pemrosesan oleh views adalah insert ke dalam model, query dari model, dan update data di dalam model.</li> <li>Menerapkan JavaScript dengan pemanggilan AJAX.</li> <li>Menerapkan filter informasi bagi pengguna yang sudah login saja. Contohnya adalah data alamat, umur, dan nomor handphone hanya dapat dilihat oleh pengguna yang sudah login saja.</li> </ol>"},{"location":"proyek/pts/#tahapan-tugas-kelompok","title":"Tahapan Tugas Kelompok","text":"<p> Tahapan dan deliverables Tenggat Waktu dan Keterangan Tahap I (40%) <ul> <li>Pembuatan GitHub kelompok</li> <li>Pembuatan aplikasi Railway kelompok</li> <li>README.md pada GitHub yang berisi:</li> <ol> <li>Nama-nama anggota kelompok</li> <li>Tautan aplikasi Railway</li> <li>Cerita aplikasi yang diajukan serta manfaatnya</li> <li>Daftar modul yang akan diimplementasikan</li> </ol> <li>Role atau peran pengguna beserta deskripsinya (karena bisa saja lebih dari satu jenis pengguna yang mengakses aplikasi)</li> </ul> Tenggat Waktu: Minggu, 26 Maret 2023, pukul 23:59 WIB Kumpulkan tautan GitHub dan Railway dengan code base proyek Django yang sudah disiapkan di GitHub.              <p>Kriteria Submisi: Code base proyek Django sudah muncul di Railway (minimal Hello World)</p> Tahap II (60%) <p>(Modul sudah terimplementasi dengan baik)</p> <ul> <li>Modul aplikasi dari tiap anggota kelompok</li> <li>URL Mapping untuk modul</li> <li>Models untuk modul</li> <li>Views untuk modul</li> <li>Terintegrasi sebagai satu kesatuan aplikasi</li> <li>Fungsionalitas sesuai dengan rancangan desain</li> </ul> Tenggat Waktu: Minggu, 23 April 2023, pukul 23:59 WIB <p>Kriteria Submisi: Seluruh modul yang dikerjakan oleh setiap anggota kelompok sudah muncul dan dapat diakses pada proyek Django</p> Bonus (5%) <ul> <li>Unit Test (passed) untuk semua aspek, diharapkan code coverage bisa mencapai minimal 80%</li> <li>GitHub Actions (CI/CD) sudah terkonfigurasi hingga deployment</li> <li>README.md pada GitHub yang berisi pipeline status</li> </ul> </p>"},{"location":"tugas/tugas-1/","title":"Tugas 1: Esai tentang Platform dan Framework","text":"<p>Pemrograman Berbasis Platform (CSGE602022) - diselenggarakan oleh Fakultas Ilmu Komputer Universitas Indonesia, Semester Genap 2022/2023</p>"},{"location":"tugas/tugas-1/#deskripsi-tugas","title":"Deskripsi Tugas","text":"<p>Tulislah sebuah esai minimal 1000 kata yang mengandung poin sebagai berikut.</p> <ul> <li>Apa yang dimaksud dengan platform?</li> <li>Apa yang dimaksud dengan framework?</li> <li>Apa perbedaan antara platform dengan framework?</li> <li>Kenapa kita perlu mempelajari lebih dari satu programming platform?</li> <li>Kenapa ada banyak framework yang tersedia untuk membuat aplikasi web? Framework manakah yang terbaik untuk membuat aplikasi web?</li> <li>Tidak ada jawaban benar salah. Esai dinilai berdasarkan ketajaman analisis dan kekritisan tulisan.</li> </ul>"},{"location":"tugas/tugas-1/#tenggat-waktu-pengerjaan","title":"Tenggat Waktu Pengerjaan","text":"<p>Tugas ini memiliki tenggat waktu pengumpulan pada tanggal 19 Februari 2023 pada pukul 23.59. Harap mengumpulkan esai yang telah kamu buat ke dalam slot submisi yang telah disediakan di SCELE. Format nama file yang dikumpulkan adalah <code>NPM_Nama_Tugas 1.pdf</code>.</p>"},{"location":"tugas/tugas-2/","title":"Tugas 2: Pengenalan Aplikasi Django dan Models View Template (MVT) pada Django","text":"<p>Pemrograman Berbasis Platform (CSGE602022) - diselenggarakan oleh Fakultas Ilmu Komputer Universitas Indonesia, Semester Genap 2022/2023</p>"},{"location":"tugas/tugas-2/#deskripsi-tugas","title":"Deskripsi Tugas","text":"<p>Pada tugas ini, kamu akan mengimplementasikan konsep Model-View-Template serta beberapa hal yang sudah kamu pelajari di kelas dan tutorial lab. Kamu dapat menyelesaikan tugas ini dengan memanfaatkan source code berikut. Silakan baca dan ikuti petunjuk penggunaan source code templat pada file <code>README.md</code>.</p> <p>Adapun pada tugas ini, kamu diminta untuk:</p> <ol> <li> <p>Membuat sebuah aplikasi baru pada proyek tersebut bernama <code>study_tracker</code>.</p> </li> <li> <p>Melakukan <code>routing</code> pada <code>django_project</code> agar dapat menjalankan aplikasi <code>study_tracker</code>.</p> </li> <li> <p>Membuat model pada aplikasi <code>study_tracker</code> yang bernama <code>Assignment</code> dan memiliki atribut sebagai berikut.</p> <ul> <li><code>name</code> untuk nama tugas dengan tipe <code>CharField</code>,</li> <li><code>subject</code> untuk mata kuliah tugas dengan tipe <code>CharField</code>,</li> <li><code>date</code> untuk tenggat waktu tugas dengan tipe <code>DateTimeField</code>,</li> <li><code>progress</code> untuk indikator progress tugas dengan tipe <code>IntegerField</code>,</li> <li><code>description</code> untuk deskripsi tugas dengan tipe <code>TextField</code>.</li> </ul> </li> <li> <p>Membuat sebuah fungsi pada <code>views.py</code> yang dapat melakukan pengambilan data dari model yang telah dibuat sebelumnya dan dikembalikan ke dalam sebuah HTML.</p> </li> <li> <p>Membuat sebuah routing pada <code>urls.py</code> aplikasi <code>study_tracker</code> untuk memetakan fungsi yang telah dibuat pada <code>views.py</code>.</p> </li> <li> <p>Memetakan data yang didapatkan ke dalam HTML dengan sintaks dari Django untuk pemetaan data template (dapat menggunakan template yang diberikan pada tutorial 1, namun sesuaikan atribut data sesuai dengan model yang telah dibuat).</p> </li> <li> <p>Melakukan <code>deployment</code> ke Railway terhadap aplikasi yang sudah dibuat sehingga nantinya dapat diakses oleh teman-temanmu melalui Internet.</p> </li> <li> <p>Membuat sebuah <code>README.md</code> yang berisi tautan menuju aplikasi Railway yang sudah di-deploy (jika dapat di-deploy) serta jawaban dari beberapa pertanyaan berikut.</p> <ul> <li>Buatlah bagan yang berisi request client ke web aplikasi berbasis Django beserta responnya dan jelaskan pada bagan tersebut kaitan antara <code>urls.py</code>, <code>views.py</code>, <code>models.py</code>, dan berkas <code>html</code>.</li> <li>Jelaskan kenapa menggunakan virtual environment? Apakah kita tetap dapat membuat aplikasi web berbasis Django tanpa menggunakan virtual environment?</li> <li>Jelaskan bagaimana cara kamu mengimplementasikan poin 1 sampai dengan 4 di atas.</li> </ul> </li> </ol> <p>Perhatikan bahwa kamu harus mengerjakan tugas ini menggunakan repositori berbeda dengan tutorial.</p>"},{"location":"tugas/tugas-2/#tenggat-waktu-pengerjaan","title":"Tenggat Waktu Pengerjaan","text":"<p>Tugas ini memiliki tenggat waktu pengumpulan pada tanggal 26 Februari 2023 pada pukul 23.59. Harap mengumpulkan link repositori yang kamu gunakan ke dalam slot submisi yang telah disediakan di SCELE.</p>"},{"location":"tugas/tugas-2/#bonus","title":"Bonus","text":"<p>Kamu akan mendapatkan nilai bonus pada penilaian tugas ini apabila kamu berhasil mengimplementasikan dan mendemonstrasikan testing dasar (contoh: unit testing, functional testing, dan lain-lain). Silakan cari di Google untuk melihat cara membuat testing di Django.</p>"},{"location":"tugas/tugas-3/","title":"Tugas 3: Pengimplementasian Data Delivery Menggunakan Django","text":"<p>Pemrograman Berbasis Platform (CSGE602022) - diselenggarakan oleh Fakultas Ilmu Komputer Universitas Indonesia, Semester Genap 2022/2023</p>"},{"location":"tugas/tugas-3/#deskripsi-tugas","title":"Deskripsi Tugas","text":"<p>Pada tugas ini, kamu akan mengimplementasikan konsep form dan data delivery serta beberapa hal yang sudah kamu pelajari selama tutorial lab.</p> <p>Adapun pada tugas ini, kamu diminta untuk:</p> <ol> <li> <p>Membuat sebuah form dengan membuat file <code>forms.py</code> pada aplikasi <code>study_tracker</code> agar aplikasi dapat menambah data tugas. Sesuaikanlah <code>fields</code> pada file <code>forms.py</code> dengan <code>models</code> yang sudah dibuat pada lab sebelumnya.</p> </li> <li> <p>Membuat fungsi baru pada <code>views.py</code> untuk menambahkan data tugas pada form secara otomatis.</p> </li> <li> <p>Membuat file HTML baru yang menampilkan form untuk menambahkan data tugas baru.</p> </li> <li> <p>Modifikasi file HTML yang menampilkan tabel tugas dengan menambahkan button untuk menuju ke halaman form.</p> </li> <li> <p>Mengimplementasi sebuah fitur untuk menyajikan data yang telah dibuat sebelumnya dalam dua format:</p> <ul> <li>XML</li> <li>JSON</li> </ul> </li> <li> <p>Membuat routing sehingga data di atas dapat diakses melalui URL:</p> <ul> <li>http://localhost:8000/study_tracker/xml untuk mengakses <code>Assignment</code> dalam format XML</li> <li>http://localhost:8000/study_tracker/json untuk mengakses <code>Assignment</code> dalam format JSON</li> </ul> </li> <li> <p>Membuat sebuah <code>README.md</code> yang berisi tautan menuju aplikasi Railway yang sudah kamu deploy (jika dapat di-deploy) serta jawaban dari beberapa pertanyaan berikut:</p> <ul> <li>Apakah kita dapat menginput data selain melalui form? Namun mengapa form dapat dikatakan lebih baik daripada menggunakan cara tersebut?</li> <li>Jelaskan perbedaan antara JSON, XML, dan HTML!</li> <li>Jelaskan mengapa kita memerlukan data delivery dalam pengimplementasian sebuah platform.</li> <li>Jelaskan bagaimana cara kamu mengimplementasikan checklist di atas.</li> </ul> </li> </ol>"},{"location":"tugas/tugas-3/#tenggat-waktu-pengerjaan","title":"Tenggat Waktu Pengerjaan","text":"<p>Tugas ini memiliki tenggat waktu pengumpulan pada tanggal 5 Maret 2023 pada pukul 23.59. Asisten dosen akan mengecek last commit dari repositori tugas lab, sehingga kamu tidak perlu mengumpulkan tautan repositori ke dalam slot submisi.</p>"},{"location":"tugas/tugas-3/#bonus","title":"Bonus","text":"<p>Kamu akan mendapatkan nilai bonus pada penilaian tugas ini apabila kamu membuat teks pada halaman tugas yang menampilkan: \"Hai {nama}, kamu memiliki {jumlah_tugas} tugas yang harus dikerjakan!\". Lokasi teks dapat berada di atas atau di bawah halaman tugas.</p>"},{"location":"tugas/tugas-4/","title":"Tugas 4: Pengimplementasian Form dan Autentikasi Menggunakan Django","text":"<p>Pemrograman Berbasis Platform (CSGE602022) - diselenggarakan oleh Fakultas Ilmu Komputer Universitas Indonesia, Semester Genap 2022/2023</p>"},{"location":"tugas/tugas-4/#deskripsi-tugas","title":"Deskripsi Tugas","text":"<p>Pada tugas ini, kamu akan mengimplementasikan konsep autentikasi, dan beberapa hal yang sudah kamu pelajari selama tutorial lab.</p> <p>Adapun pada tugas ini, kamu diminta untuk:</p> <ol> <li> <p>Membuat form registrasi pada aplikasi study tracker.</p> </li> <li> <p>Membuat form login pada aplikasi study tracker.</p> </li> <li> <p>Membuat fungsi logout pada aplikasi study tracker.</p> </li> <li> <p>Melakukan restriksi akses pada halaman study tracker.</p> </li> <li> <p>Membuat sebuah <code>README.md</code> yang berisi tautan menuju aplikasi Railway yang sudah kamu deploy (jika dapat di-deploy) serta jawaban dari beberapa pertanyaan berikut:</p> <ul> <li>Apa kegunaan <code>{% csrf_token %}</code> pada elemen <code>&lt;form&gt;</code>? Apa yang terjadi apabila tidak ada potongan kode tersebut pada elemen <code>&lt;form&gt;</code>?</li> <li>Apakah kita dapat membuat elemen <code>&lt;form&gt;</code> secara manual (tanpa menggunakan generator seperti <code>{{ form.as_table }}</code>)? Jelaskan secara gambaran besar bagaimana cara membuat <code>&lt;form&gt;</code> secara manual.</li> <li>Jelaskan proses alur data dari submisi yang dilakukan oleh pengguna melalui HTML form, penyimpanan data pada database, hingga munculnya data yang telah disimpan pada template HTML.</li> <li>Jelaskan bagaimana cara kamu mengimplementasikan checklist di atas.</li> </ul> </li> </ol>"},{"location":"tugas/tugas-4/#tenggat-waktu-pengerjaan","title":"Tenggat Waktu Pengerjaan","text":"<p>Tugas ini memiliki tenggat waktu pengumpulan pada tanggal 12 Maret 2023 pada pukul 23.59. Asisten dosen akan mengecek last commit dari repositori tugas lab, sehingga kamu tidak perlu mengumpulkan tautan repositori ke dalam slot submisi.</p>"},{"location":"tugas/tugas-4/#bonus","title":"Bonus","text":"<p>Kamu akan mendapatkan nilai bonus pada penilaian tugas ini apabila kamu menambahkan Cookies yang menampilkan data last login pada halaman study tracker</p>"},{"location":"tugas/tugas-5/","title":"Tugas 5: Desain Web Menggunakan HTML, CSS, dan Framework CSS","text":"<p>Pemrograman Berbasis Platform (CSGE602022) - diselenggarakan oleh Fakultas Ilmu Komputer Universitas Indonesia, Semester Genap 2022/2023</p>"},{"location":"tugas/tugas-5/#deskripsi-tugas","title":"Deskripsi Tugas","text":"<p>Pada tugas ini, kamu akan mengimplementasikan metode update dan delete pada data serta HTML, CSS, pengaturan static files pada Django, dan beberapa hal yang sudah kamu pelajari selama tutorial lab.</p> <p>Adapun pada tugas ini, kamu diminta untuk:</p> <ol> <li> <p>Kustomisasi templat HTML yang telah dibuat pada tugas sebelumnya dengan menggunakan CSS atau CSS framework (seperti Bootstrap atau Tailwind) dengan ketentuan sebagai berikut.</p> </li> <li> <p>Kustomisasi templat untuk halaman login, register, dan add tugas semenarik mungkin.</p> </li> <li> <p>Kustomisasi halaman utama study tracker menggunakan cards (satu card berisi satu tugas).</p> </li> <li> <p>Membuat keempat halaman yang dikustomisasi menjadi responsive.</p> </li> </ol> <p>Dokumentasi CSS mengenai <code>Media Query</code> dapat diakses melalui tautan ini.</p> <ol> <li> <p>Menambahkan button ubah untuk memperbarui data tugas.</p> </li> <li> <p>Menambahkan button hapus untuk menghapus data tugas.</p> </li> <li> <p>Membuat sebuah <code>README.md</code> yang berisi tautan menuju aplikasi Railway yang sudah kamu deploy (jika dapat di-deploy) serta jawaban dari beberapa pertanyaan berikut.</p> </li> <li> <p>Apa perbedaan dari inline, internal, dan external CSS? Apa saja kelebihan dan kekurangan dari masing-masing style?</p> </li> <li>Jelaskan tag HTML5 yang kamu ketahui.</li> <li>Jelaskan tipe-tipe CSS selector yang kamu ketahui.</li> <li>Jelaskan bagaimana cara kamu mengimplementasikan checklist di atas.</li> </ol>"},{"location":"tugas/tugas-5/#tenggat-waktu-pengerjaan","title":"Tenggat Waktu Pengerjaan","text":"<p>Tugas ini memiliki tenggat waktu pengumpulan pada tanggal 19 Maret 2023 pada pukul 23.59. Asisten dosen akan mengecek last commit dari repositori tugas lab, sehingga kamu tidak perlu mengumpulkan tautan repositori ke dalam slot submisi.</p>"},{"location":"tugas/tugas-5/#bonus","title":"Bonus","text":"<p>Kamu akan mendapatkan nilai bonus pada penilaian tugas ini apabila kamu membuat fitur berikut.</p> <ul> <li>Menambahkan efek ketika melakukan hover pada cards di halaman utama study tracker.</li> </ul> <p>Motivasi: Dengan menyelesaikan fitur bonus, kamu telah mempelajari bagaimana membuat animasi pada HTML menggunakan CSS.</p>"},{"location":"tugas/tugas-6/","title":"Tugas 6: JavaScript dan AJAX","text":"<p>Pemrograman Berbasis Platform (CSGE602022) - diselenggarakan oleh Fakultas Ilmu Komputer Universitas Indonesia, Semester Genap 2022/2023</p>"},{"location":"tugas/tugas-6/#deskripsi-tugas","title":"Deskripsi Tugas","text":"<p>Pada tugas ini, kamu akan mengimplementasikan AJAX pada fungsionalitas <code>study_tracker</code> yang telah kamu buat pada tugas sebelumnya.</p> <p>Adapun pada tugas ini, kamu diminta untuk:</p> <ol> <li>Mengubah tugas yang telah dibuat sebelumnya menjadi menggunakan AJAX.<ul> <li>Buatlah view baru untuk menambahkan tugas baru ke dalam database.</li> <li>Buatlah path <code>/tracker/create-ajax/</code> yang mengarah ke view yang baru kamu buat.</li> <li>Buatlah button modal untuk menambahkan data transaksi baru pada <code>tracker.html</code>.</li> <li>Hubungkan form yang telah kamu buat di dalam modal kamu ke path <code>/tracker/create-ajax/</code></li> <li>Tutup modal setelah penambahan task telah berhasil dilakukan.</li> <li>Lakukan refresh pada halaman utama secara asinkronus untuk menampilkan list terbaru tanpa reload seluruh page.</li> <li>Menjawab beberapa pertanyaan berikut pada <code>README.md</code>.</li> <li>Jelaskan perbedaan antara asynchronous programming dengan synchronous programming.</li> <li>Dalam penerapan JavaScript dan AJAX, terdapat penerapan paradigma event-driven programming. Jelaskan maksud dari paradigma tersebut dan sebutkan salah satu contoh penerapannya pada tugas ini.</li> <li>Jelaskan penerapan asynchronous programming pada AJAX.</li> <li>Jelaskan bagaimana cara kamu mengimplementasikan checklist di atas.</li> </ul> </li> </ol>"},{"location":"tugas/tugas-6/#tenggat-waktu-pengerjaan","title":"Tenggat Waktu Pengerjaan","text":"<p>Tugas ini memiliki tenggat waktu pengumpulan pada tanggal 28 Maret 2023 pada pukul 23.59 WIB. Asisten dosen akan mengecek last commit dari repositori tugas lab, sehingga kamu tidak perlu mengumpulkan tautan repositori ke dalam slot submisi.</p>"},{"location":"tugas/tugas-6/#bonus","title":"Bonus","text":"<p>Kamu akan mendapatkan nilai bonus pada penilaian tugas ini apabila kamu menambahkan fungsionalitas hapus dengan menggunakan AJAX DELETE.</p>"},{"location":"tugas/tugas-7/","title":"Tugas 7: Elemen Dasar Flutter","text":"<p>Pemrograman Berbasis Platform (CSGE602022) - diselenggarakan oleh Fakultas Ilmu Komputer Universitas Indonesia, Semester Genap 2022/2023</p>"},{"location":"tugas/tugas-7/#deskripsi-tugas","title":"Deskripsi Tugas","text":"<p>Pada tugas ini, kamu akan mengimplementasikan beberapa elemen dasar pada Flutter.</p> <p>Checklist untuk tugas ini adalah sebagai berikut.</p> <ul> <li>Membuat sebuah program Flutter baru dengan nama <code>study_tracker</code>.</li> <li>Membuat tiga tombol sederhana dengan ikon dan teks untuk:<ul> <li>Melihat study tracker (<code>Lihat Study Tracker</code>)</li> <li>Menambahkan tugas pada study tracker (<code>Tambah Tugas</code>)</li> <li>Logout (<code>Logout</code>)</li> </ul> </li> <li>Memunculkan <code>Snackbar</code> yang muncul dengan tulisan:<ul> <li>\"Kamu telah menekan tombol Lihat Study Tracker\" ketika tombol <code>Lihat Study Tracker</code> ditekan.</li> <li>\"Kamu telah menekan tombol Tambah Tugas\" ketika tombol <code>Tambah Tugas</code> ditekan.</li> <li>\"Kamu telah menekan tombol Logout\" ketika tombol <code>Logout</code> ditekan.</li> </ul> </li> <li>Menjawab beberapa pertanyaan berikut pada <code>README.md</code> pada root folder.<ul> <li>Jelaskan apa yang dimaksud dengan stateless widget dan stateful widget dan jelaskan perbedaan dari keduanya.</li> <li>Sebutkan seluruh widget yang kamu pakai di proyek kali ini dan jelaskan fungsinya masing-masing.</li> <li>Jelaskan bagaimana cara kamu mengimplementasikan checklist di atas secara step-by-step (bukan hanya sekadar mengikuti tutorial).</li> </ul> </li> <li>Melakukan <code>add</code>-<code>commit</code>-<code>push</code> ke suatu repositori baru di GitHub. Kamu dapat menamai repositori barumu dengan nama <code>pbp-flutter-lab</code>.</li> </ul>"},{"location":"tugas/tugas-7/#tenggat-waktu-pengerjaan","title":"Tenggat Waktu Pengerjaan","text":"<p>Tugas ini memiliki tenggat waktu pengumpulan pada tanggal 7 Mei 2023 pada pukul 23.59 WIB. Harap mengumpulkan link repositori yang kamu gunakan ke dalam slot submisi yang telah disediakan di SCELE.</p>"},{"location":"tugas/tugas-7/#bonus","title":"Bonus","text":"<p>Kamu akan mendapatkan nilai bonus pada penilaian tugas ini apabila kamu mengimplementasikan warna-warna yang berbeda untuk setiap tombol (<code>Lihat Study Tracker</code>, <code>Tambah Tugas</code>, dan <code>Logout</code>).</p>"},{"location":"tutorial/tutorial-1/","title":"Tutorial 1: Dasar-Dasar Git dan Django","text":"<p>Pemrograman Berbasis Platform (CSGE602022) - diselenggarakan oleh Fakultas Ilmu Komputer Universitas Indonesia, Semester Genap 2022/2023</p>"},{"location":"tutorial/tutorial-1/#tujuan-pembelajaran","title":"Tujuan Pembelajaran","text":"<p>Setelah menyelesaikan tutorial ini, mahasiswa diharapkan untuk dapat:</p> <ul> <li>Mengerti perintah-perintah dasar <code>git</code> yang perlu diketahui untuk mengerjakan proyek aplikasi.</li> <li>Menggunakan perintah-perintah dasar <code>git</code> yang perlu diketahui untuk mengerjakan proyek aplikasi.</li> <li>Membuat repositori <code>git</code> lokal dan daring (GitHub).</li> <li>Menambahkan remote antara repositori <code>git</code> lokal dan pasangannya pada GitHub.</li> <li>Memahami branching pada <code>git</code> dan mampu melakukan merge request/pull request.</li> <li>Mengerti konfigurasi routing yang ada pada <code>urls.py</code>.</li> <li>Memahami kaitan models, views dan template pada Django.</li> <li>Memahami sintaks dasar untuk melakukan mapping data ke templat HTML.</li> <li>Melakukan deployment aplikasi Django pada Railway.</li> </ul>"},{"location":"tutorial/tutorial-1/#pengenalan-git","title":"Pengenalan git","text":"<p>Dalam kehidupanmu sebagai mahasiswa Ilmu Komputer atau Sistem Informasi, kamu mungkin pernah menggunakan sebuah version control system. Salah satu yang mungkin kamu pakai adalah fitur undo pada text editor. Ketika kamu membuat suatu kesalahan, kamu bisa mengembalikan kesalahanmu ke waktu sebelum kamu membuat kesalahan dengan fitur undo tersebut. Contoh lain adalah ketika kamu mengerjakan dokumen secara kolaboratif di Google Drive, kamu bisa melihat setiap perubahan yang dilakukan di dokumen tersebut dan kamu bisa mengembalikan ke perubahan sebelumnya.</p> <p>Pada tutorial ini, kamu akan mempelajari sebuah version control system bernama git. <code>git</code> merupakan sebuah version control system yang umum digunakan untuk melacak perubahan pada artefak-artefak perangkat lunak seperti source code, halaman HTML, atau stylesheet. <code>git</code> akan mencatat perubahan-perubahan yang terjadi pada pekerjaan kamu sebagai sebuah rangkaian commit yang tersusun dari commit terlama hingga commit yang terbaru. Perubahan tersebut seperti sebuah graph yang mana node merepresentasikan sebuah commit dan directed edge(s) merepresentasikan hubungan antara suatu commit dengan commit sebelumnya.</p> <p>Jangan khawatir jika kamu masih asing dengan terminologi seperti: node, edge, dan graph. Kamu akan mempelajarinya lebih lanjut dalam mata kuliah Struktur Data &amp; Algoritma dan Matematika Diskret.</p> <p>Sebelum melakukan tutorial ini dan tutorial-tutorial selanjutnya, pastikan kamu telah memasang tools berikut:</p> <ul> <li>git</li> <li>Python (Latest Version)</li> <li>Text editor atau IDE yang baik, seperti   Vim,   Visual Studio Code,   Sublime, atau   PyCharm.</li> </ul> <p>Untuk meringkas dokumen tutorial ini, cara penginstalan dan konfigurasi masing-masing perlengkapan dapat dilihat melalui tautan diatas.</p>"},{"location":"tutorial/tutorial-1/#tutorial-basic-git-dan-github","title":"Tutorial: Basic git dan GitHub","text":"<ol> <li> <p>Bukalah command prompt atau shell favoritmu. Jika kamu menggunakan Windows, gunakan <code>git Bash</code> atau <code>cmd</code> (hanya berlaku jika kamu telah menambahkan path ke folder executable <code>git</code> ke PATH di environment variable). Jika kamu menggunakan OS berbasis Unix (Linux atau Mac OS), kamu bisa menggunakan shell yang tersedia pada OS-mu, seperti bash.</p> <p>Walaupun kamu bisa menggunakan aplikasi GUI seperti built-in GUI git, gitKraken, atau SourceTree, kami merekomendasikan untuk menggunakan perintah melalui shell. Shell merupakan salah satu tools yang paling umum digunakan saat pengembangan Web, terutama saat kamu harus men-deploy aplikasi web kamu ke remote server. Akan sangat berguna jika kamu mengetahui perintah shell dan git ketika GUI tidak dapat diakses. Mengeksekusi perintah melalui shell juga lebih cepat dibandingkan menggunakan GUI.</p> </li> <li> <p>Ubah direktori ke folder yang akan kamu gunakan untuk menyimpan pekerjaanmu. Gunakan perintah <code>cd</code> untuk melakukan navigasi ke direktori yang kamu inginkan.</p> </li> <li> <p>Buat folder baru untuk menyimpan file yang berhubungan dengan tutorial ini. Cobalah untuk membuat folder bernama <code>django_exercise</code> dan ubah direktori (<code>cd</code>) ke folder tersebut.</p> </li> <li> <p>Dalam direktori tersebut, ketik <code>git init</code> untuk membuat repositori <code>git</code> kosong.</p> </li> <li> <p>Cobalah untuk mengeksekusi perintah <code>git status</code> untuk melihat status dari repositori kamu ketika perintah tersebut dijalankan.</p> </li> </ol> <p>Saat ini, kamu telah berhasil membuat respositori <code>git</code> lokal pertamamu. Sebelum melanjutkan tutorial, ada beberapa konfigurasi yang harus kamu lakukan ke repositori <code>git</code> lokalmu:</p> <ol> <li> <p>Atur username dan email yang akan diasosiasikan dengan pekerjaanmu ke repositori <code>git</code> ini.</p> <pre><code>git config user.name \"&lt;NAME&gt;\"\ngit config user.email \"&lt;EMAIL&gt;\"\n</code></pre> <p>Contoh:</p> <pre><code>git config user.name \"P. Bepe\"\ngit config user.email \"p.bepe@ui.ac.id\"\n</code></pre> </li> <li> <p>Jika kamu ada dalam sebuah proxy (contoh: menggunakan PC di lab Fasilkom), kamu harus mengatur HTTP proxy pada konfigurasi <code>git</code>.</p> <pre><code>git config http.proxy &lt;PROXYHOST&gt;:&lt;PORT&gt;\n</code></pre> <p>Contoh (Jika kamu menggunakan PC di lab Fasilkom):</p> <pre><code>git config http.proxy 152.118.24.10:8080\n</code></pre> </li> <li> <p>Jika kamu ingin mengatur konfigurasi secara global (untuk setiap repositori lokal), tambahkan flag <code>--global</code> pada pemanggilan <code>git config</code>.</p> </li> <li> <p>Jika kamu ingin mengetahui konfigurasi yang diatur ke repositori lokalmu, kamu bisa menggunakan perintah berikut.</p> <pre><code>git config --list --local\n</code></pre> </li> </ol> <p>Setelah mengatur repositori <code>git</code>, silakan melanjutkan ke instruksi tutorial.</p> <ol> <li> <p>Buat file baru dengan nama <code>README.md</code> dalam direktori yang kamu inisiasi dengan repositori <code>git</code> dan tulis nama, NPM, dan kelas pada baris pertama, ketiga,  dan kelima pada file <code>README.md</code> tersebut.</p> <p>Contoh:</p> <pre><code>Nama    : P. Bepe\n\nNPM     : 2106123456\n\nKelas   : Z\n</code></pre> </li> <li> <p>Eksekusi perintah <code>git status</code> dalam bash. Perhatikan bahwa terdapat untracked file bernama <code>README.md</code>. Ini menandakan bahwa ada file yang belum di-track oleh <code>git</code>.</p> </li> <li> <p>Beritahu <code>git</code> untuk men-track perubahan yang ada pada <code>README.md</code>.</p> <pre><code>git add README.md\n</code></pre> </li> <li> <p>Eksekusi perintah <code>git status</code> lagi. Pesan status akan berubah dari eksekusi sebelumnya. Sekarang file tersebut masuk pada bagian Changes to be committed. Ini menandakan file tersebut akan di-track oleh <code>git</code> pada commit selanjutnya.</p> <p>Walaupun kamu sudah mengeksekusi perintah <code>git add</code>, file <code>README.md</code> belum sepenuhnya di-track oleh git. <code>git add</code> hanya memberi tahu git untuk memasukan perubahan dari file tersebut ke dalam staging area.</p> </li> <li> <p>Untuk menyimpan perubahan secara permanen ke dalam <code>git</code>, eksekusi perintah <code>git commit</code>. Text editor akan muncul untuk mengetikkan pesan yang menggambarkan commit yang telah kamu buat dan akan disimpan pada riwayat <code>git</code>.</p> <p>Sebuah commit dapat berarti perubahan yang kamu lakukan pada repositori lokal. Perubahan tersebut dapat berupa penambahan, perubahan dalam file, atau penghapusan satu atau lebih file.</p> </li> <li> <p>Setelah kamu selesai menulis pesan commit, simpan dan keluar dari text editor yang kamu gunakan untuk menulis pesan. Semua perubahan akan disimpan sebagai commit dan akan disimpan dalam riwayat <code>git</code>.</p> </li> </ol> <p>Kamu baru saja membuat repositori <code>git</code> lokal dan mulai memantau perubahan dari suatu file yang ada pada repositori. Jika kamu ingin membagikan hasil pekerjaanmu dengan tutor atau dengan tim kamu, kamu harus mengatur repositori tersebut agar dapat diakses melalui Internet. Untuk melakukan ini, kamu harus menaruh salinan dari repositori lokalmu ke repositori <code>git</code> daring seperti GitHub.</p> <ol> <li> <p>Bukalah GitHub menggunakan web browser favoritmu.</p> </li> <li> <p>Buatlah akun baru atau akun yang kamu punya jika kamu telah melakukan registrasi sebelum mengikuti tutorial ini.</p> </li> <li> <p>Buat repositori baru bernama Django Tutorial dan buka laman repositori. Pastikan kamu mengatur project visibility menjadi public.</p> </li> <li> <p>Cari dan klik tombol clone pada laman repositorimu. Perhatikan bahwa terdapat dua tipe cara untuk meng-clone repositori, yaitu dengan menggunakan HTTPS dan SSH. Salin URL yang menggunakan HTTPS.</p> </li> <li> <p>Perbarui repositori <code>git</code> lokalmu agar semua commit dapat disimpan di repositori GitHub-mu. Gunakan perintah <code>git remote add origin &lt;URL_REPOSITORY&gt;</code> dan gunakan URL yang tadi kamu salin sebagai argumen dari perintah tersebut.</p> <pre><code>git remote add origin &lt;URL_REPOSITORY&gt;\n</code></pre> <p>Contoh:</p> <pre><code>git remote add origin https://github.com/adrianholovaty/my-first-repo.git\n</code></pre> <p><code>git remote add origin</code> akan memberi tahu repositori lokal untuk menambahkan path bernama origin yang menunjuk ke URL yang diberikan. Dengan begitu, kamu dapat menyimpan semua commit yang kamu buat ke repositori daring menggunakan perintah <code>git push</code>.</p> </li> <li> <p>Untuk menyimpan semua commit ke repositori daring di GitHub, eksekusi perintah <code>git push</code>. Kamu juga harus menambahkan nama remote dan branch yang akan diunggah (atau di-push).</p> <pre><code>git push -u &lt;REMOTE_NAME&gt; &lt;DEFAULT_BRANCH&gt;\n</code></pre> <p>Contoh:</p> <pre><code>git push -u origin main\n</code></pre> <p><code>git push</code> akan memerintah git untuk mengunggah semua commit yang ada di branch lokal <code>main</code> ke repositori yang ditunjuk oleh remote <code>origin</code>. flag <code>-u</code> akan memastikan pemanggilan <code>git push</code> saat branch <code>main</code> aktif akan di kirim ke branch <code>main</code> di <code>origin</code>.  </p> </li> <li> <p>Perhatikan laman repositori GitHub kamu. Kamu akan melihat file kamu berhasil disimpan dan dapat diakses di GitHub.</p> </li> </ol> <p>Kamu juga bisa unduh (clone) repositori <code>git</code> lainnya ke komputermu. Cobalah untuk membuat salinan dari repositori di GitHub pada direktori yang berbeda dalam komputermu.</p> <ol> <li> <p>Bukalah laman repositori kamu di GitHub.</p> </li> <li> <p>Salin URL clone dengan HTTPS.</p> </li> <li> <p>Bukalah command prompt atau shell dan navigasi ke direktori berbeda di luar direktori repositori lokal yang telah kamu buat sebelumnya.</p> </li> <li> <p>Eksekusi perintah <code>git clone &lt;URL&gt;</code> dengan keterangan <code>&lt;URL&gt;</code> adalah URL repositori yang akan di-clone.</p> </li> <li> <p>Perhatikan bahwa nama direktori baru yang telah dibuat sama dengan nama dari repositorimu.</p> </li> </ol> <p>Pada tahap ini, kamu sebenarnya sudah punya 3 repositori: (1) orisinil, repositori lokal, (2) repositori daring di GitHub yang telah terkoneksi dengan repositori pertama, dan (3) repositori lainnya yang kamu clone dari repositori (2). Sekarang coba tambahkan commit baru di repositori (1), push ke repositori (2), dan unduh (istilah <code>git</code>: pull) ke repositori (3).</p> <ol> <li> <p>Bukalah direktori repositori lokal yang kamu insiasi sebelumnya untuk pertama kalinya.</p> </li> <li> <p>Ubah file <code>README.md</code> dengan menambahkan string yang mendeskripsikan hobi kamu pada baris ketujuh.</p> <p>Contoh:</p> <pre><code>Nama    : P. Bepe\n\nNPM     : 2106123456\n\nKelas   : Z\n\nHobi    : Tidur\n</code></pre> </li> <li> <p>Simpan file tersebut dan tambahkan ke repositori <code>git</code> lokal.</p> </li> <li> <p>Commit file tersebut dan push ke GitHub.</p> </li> <li> <p>Cek laman repositori GitHub kamu. Pastikan <code>README.md</code> sudah ter-update. Kamu bisa membandingkannya dengan versi sebelumnya dengan mengecek diff antara commit terakhir dengan commit sebelumnya.</p> </li> <li> <p>Bukalah direktori repositori lokal hasil clone repositori dari GitHub.</p> </li> <li> <p>Update repositori tersebut dengan mengeksekusi perintah <code>git pull origin main</code>.</p> </li> <li> <p>Cek repositori yang kamu clone. Kamu dapat melihat bahwa file <code>README.md</code> juga telah ter-update.</p> </li> </ol> <p>Selamat! Anda setidaknya telah mengetahui perintah <code>git</code> dasar yang dapat kamu gunakan untuk mengelola pekerjaanmu di <code>git</code> dan GitHub. Kamu mungkin bertanya mengapa kita perlu bersusah-susah melakukan skilus add-commit-push-pull ini? Mengapa kita tidak gunakan Dropbox atau Google Drive saja?</p> <p>Benar bahwa Dropbox, Google Drive, atau layanan cloud storage lainnya lebih mudah digunakan. Namun, tools tersebut digunakan untuk hal yang lebih umum. Tools tersebut tidak dibuat secara spesifik untuk mengatasi perubahan terhadap artefak-artefak perangkat lunak, khususnya ketika ada perubahan yang dilakukan secara bersamaan dan melibatkan banyak pihak. <code>git</code>, sebagai version control system, dapat memastikan integritas dari semua perubahan ketika ada beberapa pihak yang bekerja secara bersamaan dalam satu repositori. Kamu akan belajar lebih lanjut mengenai cara menggunakan version control system di lingkup keja tim selanjutnya di mata kuliah ini dan mata kuliah selanjutnya (IK: Pemrograman Lanjut, SI: Arsitektur dan Pemrograman Aplikasi Perusahaan).</p>"},{"location":"tutorial/tutorial-1/#tutorial-branch-dan-merge","title":"Tutorial: Branch dan Merge","text":"<p>Setelah mempelajari beberapa dasar dari <code>git</code>, kamu akan mulai mempelajari beberapa konsep lanjutan dari <code>git</code>. Pada pengembangan aplikasi, kita sebagai developer akan lebih banyak bekerja sama dengan orang lain sebagai tim. Beruntungnya, <code>git</code> memiliki fitur untuk mengakomodasi kolaborasi antar developer. Beberapa fitur yang dimaksud adalah branch dan merge.</p> <p>Secara sederhana, branch adalah fitur <code>git</code> yang memungkinkan sebuah source code yang disimpan pada <code>git</code> memiliki versi lain atau biasanya cabang yang berisikan perubahan-perubahan sesuai dengan kebutuhan dan developer yang mengembangkannya. Umumnya setelah kita melakukan <code>git push</code>, perubahan yang kita simpan akan masuk ke dalam cabang yang dituju oleh kita. Kegunaan branch ini adalah untuk menghindari tabrakan, konflik serta race condition dalam hal melakukan perubahan ketika sedang dalam pengembangan.</p> <p>Adapun merge adalah fitur <code>git</code> yang digunakan untuk menggabungkan suatu perubahan yang telah disimpan dalam satu branch ke dalam branch target. Pada saat melakukan <code>git merge</code>, kejadian merge conflict dapat terjadi. Merge conflict adalah sebuah konflik yang terjadi apabila terdapat perubahan pada file yang sama dalam dua branch berbeda atau ketika satu file telah dihapus pada branch pertama, namun berkas tersebut ada dan mengalami perubahan pada branch kedua. Untuk menyelesaikan merge conflict, biasanya developer dapat menggunakan GUI yang telah disiapkan oleh <code>git</code> pada GitHub. Namun apabila platform tersebut sedang tidak dapat mengakomodasi proses merge conflict, biasanya developer akan diminta untuk menyelesaikannya di repositori lokal mereka.</p> <p>Sekarang kita akan mencoba untuk menerapkan konsep branch dan merge.</p> <ol> <li> <p>Pada direktori <code>git</code> lokal yang telah kita kerjakan pada tutorial sebelumnya, buatlah sebuah branch baru di repositori tersebut.</p> <pre><code>git checkout -b &lt;NAMA_BRANCH&gt;\n</code></pre> <p>Contoh:</p> <pre><code>git checkout -b second\n</code></pre> <p>Sekarang, sebuah branch baru telah dibuat. Kamu bisa melihat branch apa saja yang ada di repositori lokal dengan command <code>git branch</code>. Untuk melakukan switching ke branch lain, kamu dapat langsung melakukannya dengan perintah <code>git checkout &lt;NAMA_BRANCH&gt;</code>.</p> </li> <li> <p>Buatlah sebuah perubahan pada file README.md dengan mengubah hobi kamu di baris ketujuh ke hobi lain.</p> <p>Contoh:</p> <pre><code>Nama    : P. Bepe\n\nNPM     : 2106123456\n\nKelas   : Z\n\nHobi    : Usil\n</code></pre> </li> <li> <p>Simpan file tersebut dan tambahkan ke repositori <code>git</code> lokal.</p> </li> <li> <p>Commit file tersebut dan push ke GitHub.</p> </li> <li> <p>Cek laman repositori GitHub kamu. Pada pilihan branch yang ada di repositori kamu, sekarang kamu dapat melihat terdapat branch baru yang baru saja kamu buat.</p> </li> <li> <p>Sekarang merge atau gabungkan branch baru tersebut ke branch utama dari repositori. Kamu dapat melakukannya dengan memilih tab <code>pull request</code> pada halaman repositori kamu di GitHub dan memilih opsi <code>new pull request</code>.</p> </li> <li> <p>Pilihlah branch main sebagai base dan branch baru kamu sebagai compare. Setelah memilih branch tersebut, kamu dapat melihat perbedaan antara dua branch yang akan digabungkan. Pilihlah <code>create pull request</code> untuk menggabungkan kedua branch tersebut.</p> </li> <li> <p>Setelah itu, kamu akan masuk ke sebuah halaman form untuk mengisi informasi tentang pull request yang akan kamu lakukan. Kamu dapat mengisi deskripsi tentang pull request serta mengubah judul dari pull request. Untuk saat ini diamkan saja dulu dan langsung pilihlah <code>create pull request</code>.</p> </li> <li> <p>GitHub akan secara otomatis melakukan cek dan membandingkan antara kedua branch yang ingin digabungkan. Apabila tidak ada konflik, kamu bisa langsung memilih <code>merge pull request</code>.</p> </li> <li> <p>Sekarang kedua branch telah tergabung. Kamu bisa melihat perubahan yang kamu lakukan di branch baru telah tersimpan atau tergabung dalam branch main.</p> </li> </ol>"},{"location":"tutorial/tutorial-1/#tutorial-membuat-proyek-dan-aplikasi-django-beserta-konfigurasi-model","title":"Tutorial: Membuat Proyek dan Aplikasi Django beserta Konfigurasi Model","text":"<p>Sebagai bayangan, berikut adalah struktur direktori proyek setelah kamu menyelesaikan tutorial ini.</p> <p></p> <ol> <li> <p>Di dalam direktori <code>django_exercise</code>, bukalah command prompt atau shell dan buatlah sebuah virtual environment. Virtual environment ini berguna untuk mengisolasi package serta dependencies dari aplikasi sehingga tidak bertabrakan dengan versi lain yang ada pada komputermu. Kamu dapat membuat virtual environment dengan perintah:</p> <pre><code>python -m venv env\n</code></pre> </li> <li> <p>Nyalakan virtual environment yang telah dibuat dengan perintah berikut. Pastikan saat ini kamu sedang berada pada direktori <code>django_exercise</code> yang telah dibuat sebelumnya. Perhatikan pula bahwa Windows dengan Unix memiliki perintah yang berbeda. Apabila virtual environment berhasil dinyalakan, kamu dapat melihat sebuah teks <code>(env)</code> di posisi paling kiri dari baris input shell milikmu.</p> <ul> <li> <p>Windows</p> <pre><code>env\\Scripts\\activate.bat\n</code></pre> </li> <li> <p>Unix (Linux &amp; Mac OS)</p> <pre><code>source env/bin/activate\n</code></pre> </li> </ul> </li> <li> <p>Buatlah file baru pada folder tersebut dengan nama <code>requirements.txt</code> dan tambahkan beberapa dependencies berikut ini yang dibutuhkan ke dalam file tersebut.</p> <pre><code>asgiref==3.6.0\ncertifi==2022.12.7\ncharset-normalizer==3.0.1\nDjango==4.1.6\ngunicorn==20.1.0\nidna==3.4\npsycopg2-binary==2.9.5\nrequests==2.28.2\nsqlparse==0.4.3\ntzdata==2022.7\nurllib3==1.26.14\nwhitenoise==6.3.0\n</code></pre> </li> <li> <p>Instal dependencies yang diperlukan untuk menjalankan proyek Django dengan perintah perintah <code>pip install -r requirements.txt</code>.</p> </li> <li> <p>Buatlah sebuah proyek Django baru bernama <code>django_tutorial</code> dengan perintah <code>django-admin startproject django_tutorial .</code> (pakai titik di akhir perintah).</p> </li> <li> <p>Eksekusi perintah <code>python manage.py runserver</code> di Windows atau <code>./manage.py runserver</code> di OS berbasis Unix untuk menjalankan aplikasi Django. Pastikan bahwa file <code>manage.py</code> ada pada direktori yang aktif pada shell kamu saat ini.</p> </li> <li> <p>Bukalah http://localhost:8000 menggunakan browser favoritmu untuk melihat aplikasi Django yang telah kamu buat. Kamu sekarang dapat melihat sebuah roket sedang meluncur di halaman tersebut. Selamat! Kamu telah berhasil membuat aplikasi Django dari awal.</p> </li> <li> <p>Untuk mematikan server Django yang sedang berjalan, kamu dapat menggunakan tombol <code>Ctrl+C</code> pada Windows/Linux atau <code>Command+C</code> pada MacOS.</p> </li> <li> <p>Selanjutnya, buatlah sebuah <code>django-app</code> bernama <code>money_tracker</code> dengan perintah <code>python manage.py startapp money_tracker</code>.</p> </li> <li> <p>Buka <code>settings.py</code> di folder <code>django_tutorial</code> dan tambahkan aplikasi <code>money_tracker</code> ke dalam variabel <code>INSTALLED_APPS</code> untuk mendaftarkan <code>django-app</code> yang sudah kamu buat ke dalam proyek Django-mu. Contohnya adalah sebagai berikut.</p> <pre><code>INSTALLED_APPS = [\n...,\n'money_tracker',\n]\n</code></pre> </li> <li> <p>Buka file <code>models.py</code> yang ada di folder <code>money_tracker</code> dan tambahkan potongan kode berikut.</p> <pre><code>from django.db import models\nclass TransactionRecord(models.Model):\nname = models.CharField(max_length=50)\ntype = models.CharField(max_length=20)\namount = models.IntegerField()\ndate = models.DateTimeField(auto_now_add=True)\ndescription = models.TextField()\n</code></pre> </li> <li> <p>Lakukan perintah <code>python manage.py makemigrations</code> untuk mempersiapkan migrasi skema model ke dalam database Django lokal.</p> </li> <li> <p>Jalankan perintah <code>python manage.py migrate</code> untuk menerapkan skema model yang telah dibuat ke dalam database Django lokal.</p> </li> </ol>"},{"location":"tutorial/tutorial-1/#tutorial-implementasi-views-dasar","title":"Tutorial: Implementasi Views Dasar","text":"<p>Sebelum kita mengimplemetasikan views, kita perlu membuat suatu skeleton yang berfungsi sebagai kerangka views dari situs web kita.</p> <ol> <li> <p>Buatlah folder <code>templates</code> pada root folder (jika belum ada) dan buatlah sebuah file baru bernama <code>base.html</code>. Isilah file tersebut dengan kode berikut.</p> <pre><code>{% load static %}\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\"&gt;\n{% block meta %}\n{% endblock meta %}\n&lt;/head&gt;\n&lt;body&gt;\n{% block content %}\n{% endblock content %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> <li> <p>Bukalah <code>settings.py</code> yang ada pada folder <code>django_tutorial</code> dan carilah baris yang mengandung <code>TEMPLATES</code>. Sesuaikan kode yang ada dengan potongan kode berikut agar file <code>base.html</code> terdeteksi sebagai file templat.</p> <pre><code>...\nTEMPLATES = [\n{\n'BACKEND': 'django.template.backends.django.DjangoTemplates',\n'DIRS': [BASE_DIR / 'templates'],\n'APP_DIRS': True,\n...\n}\n]\n...\n</code></pre> </li> </ol> <p>Setelah membuat kerangka dasar HTML untuk situs web, maka kita baru dapat membuat view baru tanpa perlu mendeklarasikan struktur dasar HTML dari awal.</p> <ol> <li> <p>Buka <code>views.py</code> yang ada pada folder <code>money_tracker</code> dan buatlah sebuah fungsi yang menerima parameter <code>request</code> dan mengembalikan <code>render(request, \"tracker.html\")</code>. Contohnya adalah sebagai berikut.</p> <pre><code>def show_tracker(request):\nreturn render(request, \"tracker.html\")\n</code></pre> </li> <li> <p>Buatlah sebuah folder bernama <code>templates</code> di dalam folder aplikasi <code>money_tracker</code> dan buatlah sebuah berkas bernama <code>tracker.html</code>. Isi dari <code>tracker.html</code> dapat kamu isi dengan template berikut.</p> <pre><code>{% extends 'base.html' %}\n\n{% block content %}\n&lt;h5&gt;Nama: &lt;/h5&gt;\n&lt;p&gt;Fill me!&lt;/p&gt;\n&lt;table&gt;\n&lt;tr&gt;\n&lt;th&gt;Nama&lt;/th&gt;\n&lt;th&gt;Jenis&lt;/th&gt;\n&lt;th&gt;Jumlah&lt;/th&gt;\n&lt;th&gt;Tanggal&lt;/th&gt;\n&lt;th&gt;Deskripsi&lt;/th&gt;\n&lt;/tr&gt;\n    {% comment %} Tambahkan data di bawah baris ini {% endcomment %}\n&lt;/table&gt;\n{% endblock content %}\n</code></pre> </li> <li> <p>Buatlah sebuah berkas di dalam folder aplikasi <code>money_tracker</code> bernama <code>urls.py</code> untuk melakukan routing terhadap fungsi <code>views</code> yang telah kamu buat sehingga nantinya halaman HTML dapat ditampilkan lewat browser-mu. Isi dari <code>urls.py</code> tersebut adalah sebagai berikut.</p> <pre><code>from django.urls import path\nfrom money_tracker.views import show_tracker\napp_name = 'money_tracker'\nurlpatterns = [\npath('', show_tracker, name='show_tracker'),\n]\n</code></pre> </li> <li> <p>Daftarkan juga aplikasi <code>money_tracker</code> ke dalam <code>urls.py</code> yang ada pada folder <code>django_tutorial</code> dengan menambahkan potongan kode berikut pada variabel <code>urlpatterns</code>.</p> <pre><code>...\nfrom django.urls import path, include\n...\npath('tracker/', include('money_tracker.urls')),\n...\n</code></pre> </li> <li> <p>Jalankan proyek Django-mu dengan perintah <code>python manage.py runserver</code> dan bukalah http://localhost:8000/tracker/ di browser favoritmu untuk melihat halaman yang sudah kamu buat.</p> </li> </ol> <p>Apabila muncul sebuah halaman yang berisikan tabel money tracker, maka selamat! Kamu telah berhasil melakukan routing sebuah fungsi views yang dapat melakukan render sebuah halaman HTML. Akan tetapi seperti yang dapat kamu lihat, tidak ada data pada tabel money tracker tersebut. Kamu juga dapat melihat tidak jelas milik siapa money tracker tersebut sehingga kamu ingin menampilkan nama kamu ke dalam money tracker tersebut. Sekarang, kamu akan mempelajari bagaimana menampilkan data ke dalam HTML dari database Django lokal maupun data atau variabel yang kamu definisikan dalam berkas <code>views.py</code>.</p>"},{"location":"tutorial/tutorial-1/#tutorial-menghubungkan-models-dengan-views-dan-template","title":"Tutorial: Menghubungkan Models dengan Views dan Template","text":"<ol> <li> <p>Pada fungsi views yang telah kamu buat, impor model yang sudah kamu buat sebelumnya ke dalam file <code>views.py</code>. Kamu akan menggunakan class tersebut untuk melakukan pengambilan data dari database. Contohnya adalah sebagai berikut.</p> <pre><code>from django.shortcuts import render\nfrom money_tracker.models import TransactionRecord\n...\n</code></pre> </li> <li> <p>Tambahkan potongan kode di bawah ini ke dalam fungsi <code>show_tracker</code> yang sudah kamu buat sebelumnya. Potongan kode ini berfungsi untuk memanggil fungsi query ke model database dan menyimpan hasil query tersebut ke dalam sebuah variabel.</p> <p>Sesuaikan isi variabel <code>name</code> dengan nama kalian, ya. \ud83d\ude09</p> <pre><code>transaction_data = TransactionRecord.objects.all()\ncontext = {\n'list_of_transactions': transaction_data,\n'name': 'Kak Athal'\n}\n</code></pre> </li> <li> <p>Tambahkan <code>context</code> sebagai parameter ketiga pada pengembalian fungsi render di fungsi yang sudah kamu buat sebelumnya. Data yang ada pada variabel <code>context</code> tersebut akan ikut di-render oleh Django sehingga nantinya kamu dapat memunculkan data tersebut pada halaman HTML.</p> <pre><code>return render(request, \"tracker.html\", context)\n</code></pre> <p>Dengan demikian, kode <code>show_tracker</code> menjadi seperti berikut.</p> <pre><code>from django.shortcuts import render\nfrom money_tracker.models import TransactionRecord\ndef show_tracker(request):\ntransaction_data = TransactionRecord.objects.all()\ncontext = {\n'list_of_transactions': transaction_data,\n'name': 'Kak Athal'\n}\nreturn render(request, \"tracker.html\", context)\n</code></pre> </li> </ol> <p>Sekarang, kamu akan belajar melakukan mapping terhadap data yang telah ikut di-render pada fungsi <code>views</code> untuk dapat memunculkannya di halaman HTML. Untuk melakukan mapping tersebut, kamu dapat menggunakan sintaks khusus template yang ada pada Django, yakni <code>{{data}}</code>. Apabila kamu tertarik untuk mengetahui lebih jauh tentang sintaks dari template yang ada pada Django, kamu dapat membaca dan mempelajari lebih dalam di dokumentasi template tags Django.</p> <ol> <li> <p>Bukalah file HTML yang sudah kamu buat sebelumnya pada folder <code>templates</code> yang ada di dalam direktori <code>money_tracker</code>.</p> </li> <li> <p>Ubah <code>Fill me!</code> yang ada di dalam HTML tag <code>&lt;p&gt;</code> menjadi <code>{{name}}</code> untuk menampilkan nama kamu di halaman HTML. Contohnya adalah sebagai berikut.</p> <pre><code>...\n&lt;h5&gt;Nama: &lt;/h5&gt;\n&lt;b&gt;{{name}}&lt;/b&gt;\n...\n</code></pre> </li> <li> <p>Untuk menampilkan daftar transaksi ke dalam tabel, kamu perlu melakukan iterasi terhadap variabel <code>list_of_transactions</code> yang telah kamu ikut render ke dalam HTML. Perhatikan bahwa kamu tidak dapat memanggil daftar transaksi tersebut secara langsung seperti yang kamu lakukan pada langkah 2 sebab variabel <code>list_of_transactions</code> merupakan sebuah kontainer yang berisikan objek. Kamu juga perlu memanggil nama variabel/atribut spesifik dari objek yang ada dalam kontainer tersebut untuk memanggil data dari objek tersebut. Contohnya adalah sebagai berikut.</p> <pre><code>...\n{% for transaction in list_of_transactions %}\n    &lt;tr&gt;\n&lt;td&gt;{{transaction.name}}&lt;/td&gt;\n&lt;td&gt;{{transaction.type}}&lt;/td&gt;\n&lt;td&gt;{{transaction.amount}}&lt;/td&gt;\n&lt;td&gt;{{transaction.date}}&lt;/td&gt;\n&lt;td&gt;{{transaction.description}}&lt;/td&gt;\n&lt;/tr&gt;\n{% endfor %}\n...\n</code></pre> </li> </ol> <p>Coba lakukan <code>runserver</code>; seharusnya kamu dapat melihat kolom nama berubah menjadi nama yang telah kamu isi sebelumnya pada file <code>views.py</code>.</p>"},{"location":"tutorial/tutorial-1/#tutorial-melakukan-deploy-aplikasi-django-ke-railway","title":"Tutorial: Melakukan Deploy Aplikasi Django ke Railway","text":"<p>Sebelum kita melakukan automated deployment, kita perlu melakukan konfigurasi tambahan agar situs web yang kita buat dapat bekerja dengan baik.</p> <ol> <li> <p>Buatlah sebuah file bernama <code>Procfile</code> (tanpa ada ekstensi file) pada root folder dan isilah file tersebut dengan kode berikut.</p> <pre><code>web: python manage.py migrate &amp;&amp; gunicorn django_tutorial.wsgi\n</code></pre> </li> <li> <p>Bukalah file <code>settings.py</code> yang ada pada folder <code>django_tutorial</code>. Tambahkan baris kode berikut setelah bagian <code>DEBUG</code>.</p> <pre><code>ALLOWED_HOSTS = [f'{APP_NAME}.up.railway.app']\nCSRF_TRUSTED_ORIGINS = [f'https://{APP_NAME}.up.railway.app']\n</code></pre> </li> </ol> <p>Setelah melakukan konfigurasi, silakan push proyek kamu ke GitHub dan lakukan hal-hal berikut.</p> <ol> <li> <p>Bukalah situs web Railway, klik tombol <code>Login</code> di pojok kanan atas, dan pilih <code>GitHub</code> sebagai metode login.</p> <p></p> </li> <li> <p>Selesaikan proses registrasi sehingga kamu kembali ke halaman pembuatan proyek baru.</p> </li> <li> <p>Klik pilihan <code>Deploy from GitHub repo</code> dan pilih repositori tempat kamu menaruh proyek Django kamu.</p> </li> <li> <p>Buka proyek, klik kotak <code>web</code>, dan klik menu <code>Variables</code>. Buatlah variabel baru bernama <code>APP_NAME</code> dan isilah dengan nama situs web yang kamu ingin pakai.</p> </li> <li> <p>Buka menu <code>Settings</code> dan ubah nama domain situs web kamu sesuai yang telah kamu buat sebelumnya.</p> </li> <li> <p>Lakukan push ulang apabila Railway tidak melakukan deployment ulang setelah kamu mengubah pengaturan.</p> </li> </ol> <p>Voila! Seharusnya situs web kamu dapat dibuka dan menghasilkan halaman yang telah kamu buat sebelumnya.</p>"},{"location":"tutorial/tutorial-1/#credits","title":"Credits","text":"<p>Tutorial ini dikembangkan berdasarkan PBP Ganjil 2023 yang ditulis oleh Tim Pengajar Pemrograman Berbasis Platform 2023. Segala tutorial serta instruksi yang dicantumkan pada repositori ini dirancang sedemikian rupa sehingga mahasiswa yang sedang mengambil mata kuliah Pemrograman Berbasis Platform dapat menyelesaikan tutorial saat sesi lab berlangsung.</p>"},{"location":"tutorial/tutorial-2/","title":"Tutorial 2: Form dan Data Delivery","text":"<p>Pemrograman Berbasis Platform (CSGE602022) - diselenggarakan oleh Fakultas Ilmu Komputer Universitas Indonesia, Semester Genap 2022/2023</p>"},{"location":"tutorial/tutorial-2/#tujuan-pembelajaran","title":"Tujuan Pembelajaran\u200b","text":"<p>Setelah menyelesaikan tutorial ini, mahasiswa diharapkan untuk dapat:</p> <ul> <li>Mengetahui XML dan JSON sebagai salah satu metode data delivery</li> <li>Memahami cara kerja submisi data yang diberikan oleh pengguna menggunakan elemen <code>form</code></li> <li>Memahami cara mengirimkan data menggunakan format XML dan JSON</li> <li>Memahami cara mengambil data spesifik berdasarkan ID</li> </ul>"},{"location":"tutorial/tutorial-2/#pengenalan-data-delivery","title":"Pengenalan Data Delivery","text":"<p>Dalam mengembangkan suatu platform, ada kalanya kita perlu mengirimkan data dari satu stack ke stack lainnya. Data yang dikirimkan bisa bermacam-macam bentuknya. Beberapa contoh format data yang umum digunakan antara lain HTML, XML, dan JSON. Implementasi data delivery dalam bentuk HTML sudah kamu pelajari pada tutorial sebelumnya. Tutorial ini akan mengajarkan data delivery melalui XML dan JSON.</p>"},{"location":"tutorial/tutorial-2/#xml-extensible-markup-language","title":"XML (Extensible Markup Language)","text":"<p>XML adalah singkatan dari eXtensible Markup Language. XML didesain menjadi self-descriptive, sehingga dengan membaca XML tersebut kita bisa mengerti informasi apa yang ingin disampaikan dari data yang tertulis. XML digunakan pada banyak aplikasi web maupun mobile, yaitu untuk menyimpan dan mengirimkan data. XML hanyalah informasi yang dibungkus di dalam tag. Kita perlu menulis program untuk mengirim, menerima, menyimpan, atau menampilkan informasi tersebut.</p> <p>Contoh data dalam format XML adalah sebagai berikut.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;subject&gt;\n&lt;name&gt;Bahasa Italia Dasar A&lt;/name&gt;\n&lt;lecturer&gt;Prof. Antonietta Sireci&lt;/lecturer&gt;\n&lt;credit&gt;3&lt;/credit&gt;\n&lt;organizer&gt;Sastra Perancis&lt;/organizer&gt;\n&lt;/subject&gt;\n</code></pre> <p>XML di atas sangatlah self-descriptive:</p> <ul> <li>Ada informasi nama mata kuliah (<code>name</code>)</li> <li>Ada informasi nama dosen pengampu (<code>lecturer</code>)</li> <li>Ada informasi SKS (<code>credit</code>)</li> <li>Ada informasi penyelenggara (<code>organizer</code>)</li> </ul> <p>Dokumen XML membentuk struktur seperti tree yang dimulai dari root, lalu branch, hingga berakhir pada leaves. Dokumen XML harus mengandung sebuah root element yang merupakan parent dari elemen lainnya. Pada contoh di atas, <code>&lt;phone&gt;</code> adalah root element.</p> <p>Untuk baris <code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</code> biasa disebut sebagai XML Prolog. XML Prolog bersifat opsional, akan tetapi jika ada maka posisinya harus berada di awal dokumen XML. Pada dokumen XML semua elemen wajib memiliki closing tag. Tag pada XML sifatnya case sensitive, sehingga tag <code>&lt;subject&gt;</code> berbeda dengan tag <code>&lt;Subject&gt;</code>.</p>"},{"location":"tutorial/tutorial-2/#json-javascript-object-notation","title":"JSON (JavaScript Object Notation)","text":"<p>JSON adalah singkatan dari JavaScript Object Notation. JSON didesain menjadi self-describing, sehingga JSON sangat mudah untuk dimengerti. JSON digunakan pada banyak aplikasi web maupun mobile, yaitu untuk menyimpan dan mengirimkan data. Sintaks JSON merupakan turunan dari Object JavaScript. Akan tetapi format JSON berbentuk text, sehingga kode untuk membaca dan membuat JSON banyak terdapat dibanyak bahasa pemrograman.</p> <p>Contoh data dalam format JSON adalah sebagai berikut.</p> <pre><code>{\n\"name\": \"Bahasa Italia Dasar B\",\n\"lecturer\": \"Prof. Antonietta Sireci\",\n\"credit\": \"3\",\n\"organizer\": \"Sastra Perancis\",\n}\n</code></pre> <p>Data pada JSON disimpan dalam bentuk key dan value. Pada contoh di atas yang menjadi key adalah <code>name</code>, <code>lecturer</code>, <code>credit</code>, dan <code>organizer</code>. Value dapat berupa tipe data primitif (string, number, boolean) ataupun berupa objek.</p>"},{"location":"tutorial/tutorial-2/#tutorial-membuat-form-registrasi","title":"Tutorial: Membuat Form Registrasi","text":"<p>Sampai saat ini, belum ada data yang ditambahkan ke dalam aplikasi. Sekarang, kita akan membuat sebuah form sederhana untuk menginput data transaksi pada aplikasi sehingga nantinya kamu dapat menambahkan data baru untuk ditampilkan pada halaman utama.</p> <p>Catatan: Pada tutorial ini, kamu akan menggunakan proyek yang sudah kamu buat pada tutorial sebelumnya.</p> <ol> <li> <p>Jalankan virtual environment terlebih dahulu.</p> </li> <li> <p>Buka <code>models.py</code> yang ada pada folder <code>money_tracker</code> yang sudah dibuat sebelumnya. Ubahlah kode model menjadi seperti berikut agar tipe transaksi dibatasi pada pemasukan dan pengeluaran saja.</p> <pre><code>from django.db import models\nTYPE_CHOICES = [\n('Pengeluaran', 'Pengeluaran'),\n('Pemasukan', 'Pemasukan')\n]\nclass TransactionRecord(models.Model):\nname = models.CharField(max_length=50)\ntype = models.CharField(max_length=20, choices=TYPE_CHOICES)\namount = models.IntegerField()\ndate = models.DateTimeField(auto_now_add=True)\ndescription = models.TextField()\n</code></pre> </li> <li> <p>Lakukanlah migrasi dengan perintah <code>python manage.py makemigrations</code> dan <code>python manage.py migrate</code> pada Terminal atau Command Prompt untuk mengaplikasikan perubahan model yang telah dilakukan pada langkah sebelumnya.</p> </li> <li> <p>Buatlah file baru pada folder <code>money_tracker</code> dengan nama <code>forms.py</code> untuk membuat struktur form yang dapat menerima data transaksi baru. Tambahkan kode berikut ke dalam file <code>forms.py</code>.</p> <pre><code>from django.forms import ModelForm\nfrom money_tracker.models import TransactionRecord\nclass TransactionRecordForm(ModelForm):\nclass Meta:\nmodel = TransactionRecord\nfields = [\"name\", \"type\", \"amount\", \"description\"]\n</code></pre> </li> <li> <p>Kemudian, bukalah file <code>views.py</code> yang ada pada folder <code>money_tracker</code> dan tambahkan  import <code>HttpResponseRedirect</code>, <code>TransactionRecordForm</code>, dan <code>reverse</code> pada bagian paling atas.</p> <pre><code>from django.http import HttpResponseRedirect\nfrom money_tracker.forms import TransactionRecordForm\nfrom django.urls import reverse\n</code></pre> </li> <li> <p>Buatlah fungsi baru dengan nama <code>create_transaction</code> pada file tersebut yang menerima parameter <code>request</code>, dan tambahkan potongan kode di bawah ini untuk menghasilkan formulir yang dapat menambahkan data transaksi secara otomatis ketika data di-submit dari form.</p> <pre><code>def create_transaction(request):\nform = TransactionRecordForm(request.POST or None)\nif form.is_valid() and request.method == \"POST\":\nform.save()\nreturn HttpResponseRedirect(reverse('money_tracker:show_tracker'))\ncontext = {'form': form}\nreturn render(request, \"create_transaction.html\", context)\n</code></pre> </li> <li> <p>Buatlah berkas HTML baru dengan nama <code>create_transaction.html</code> pada folder <code>money_tracker/templates</code>. Isi dari <code>create_transaction.html</code> dapat kamu isi dengan template berikut.</p> <pre><code>{% extends 'base.html' %}\n\n{% load static %}\n\n{% block content %}\n\n&lt;h1&gt;Tambah Transaksi Baru&lt;/h1&gt;\n&lt;form method=\"POST\"&gt;\n    {% csrf_token %}\n    &lt;table&gt;\n        {{ form.as_table }}\n        &lt;tr&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;\n&lt;input type=\"submit\" value=\"Tambah\"/&gt;\n&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/form&gt;\n{% endblock %}\n</code></pre> </li> <li> <p>Buka <code>urls.py</code> yang ada pada folder <code>money_tracker</code> dan <code>import</code> fungsi yang sudah kamu buat tadi.</p> <pre><code>from money_tracker.views import create_transaction\n</code></pre> </li> <li> <p>Tambahkan path url ke dalam <code>urlpatterns</code> untuk mengakses fungsi yang sudah di-import pada poin sebelumnya.</p> <pre><code>path('create', create_transaction, name='create_transaction'),\n</code></pre> </li> <li> <p>Buka <code>tracker.html</code> dan tambahkan kode berikut setelah block <code>&lt;table&gt;&lt;/table&gt;</code>untuk menambahkan button tambah transaksi baru.</p> <pre><code>...\n&lt;/table&gt;\n&lt;br&gt;\n&lt;a href=\"{% url 'money_tracker:create_transaction' %}\"&gt;\n&lt;button&gt;\n        Transaksi Baru\n    &lt;/button&gt;\n&lt;/a&gt;\n...\n</code></pre> </li> </ol> <p>Kita sudah menambahkan form transaksi baru. Coba jalankan server dan tambahkan beberapa data transaksi baru. Seharusnya kamu dapat melihat data yang ditambahkan pada halaman utama aplikasi.</p>"},{"location":"tutorial/tutorial-2/#tutorial-mengembalikan-data-dalam-bentuk-xml","title":"Tutorial: Mengembalikan Data dalam Bentuk XML","text":"<p>Catatan: Pada tutorial ini, kamu akan menggunakan proyek yang sudah kamu buat pada tutorial sebelumnya.</p> <ol> <li> <p>Buka <code>views.py</code> yang ada pada folder <code>money_tracker</code> dan buatlah sebuah fungsi yang menerima parameter request (misal bernama <code>show_xml</code>).</p> </li> <li> <p>Tambahkan import <code>HttpResponse</code> dan <code>Serializer</code> pada bagian paling atas.</p> <pre><code>from django.http import HttpResponse\nfrom django.core import serializers\n</code></pre> </li> <li> <p>Buatlah sebuah variabel di dalam fungsi tersebut yang menyimpan hasil query dari seluruh data yang ada pada <code>TransactionRecord</code>.</p> <pre><code>data = TransactionRecord.objects.all()\n</code></pre> </li> <li> <p>Tambahkan return function berupa <code>HttpResponse</code> yang berisi parameter data hasil query yang sudah diserialisasi menjadi XML dan parameter <code>content_type=\"application/xml\"</code>.</p> <pre><code>return HttpResponse(serializers.serialize(\"xml\", data), content_type=\"application/xml\")\n</code></pre> </li> <li> <p>Buka <code>urls.py</code> yang ada pada folder <code>money_tracker</code> dan import fungsi yang sudah kamu buat tadi.</p> <pre><code>from money_tracker.views import show_xml #sesuaikan dengan nama fungsi yang dibuat\n</code></pre> </li> <li> <p>Tambahkan path url ke dalam <code>urlpatterns</code> untuk mengakses fungsi yang sudah diimpor tadi.</p> <pre><code>...\npath('xml/', show_xml, name='show_xml'), #sesuaikan dengan nama fungsi yang dibuat\n...\n</code></pre> </li> <li> <p>Jalankan proyek Django-mu dengan perintah <code>python manage.py runserver</code> dan bukalah http://localhost:8000/tracker/xml/ (sesuaikan dengan path url yang dibuat) di browser favoritmu untuk melihat hasilnya.</p> </li> </ol>"},{"location":"tutorial/tutorial-2/#tutorial-mengembalikan-data-dalam-bentuk-json","title":"Tutorial: Mengembalikan Data dalam Bentuk JSON","text":"<ol> <li> <p>Buka <code>views.py</code> yang ada pada folder <code>money_tracker</code> dan buatlah sebuah fungsi baru yang menerima parameter request (misal bernama <code>show_json</code>).</p> </li> <li> <p>Buatlah sebuah variabel di dalam fungsi tersebut yang menyimpan hasil query dari seluruh data yang ada pada <code>TransactionRecord</code>.</p> <pre><code>data = TransactionRecord.objects.all()\n</code></pre> </li> <li> <p>Tambahkan return function berupa <code>HttpResponse</code> yang berisi parameter data hasil query yang sudah diserialisasi menjadi JSON dan parameter <code>content_type=\"application/json\"</code>.</p> <pre><code>return HttpResponse(serializers.serialize(\"json\", data), content_type=\"application/json\")\n</code></pre> </li> <li> <p>Buka <code>urls.py</code> yang ada pada folder <code>money_tracker</code> dan import fungsi yang sudah kamu buat tadi.</p> <pre><code>from money_tracker.views import show_json #sesuaikan dengan nama fungsi yang dibuat\n</code></pre> </li> <li> <p>Tambahkan path url ke dalam <code>urlpatterns</code> untuk mengakses fungsi yang sudah diimpor tadi.</p> <pre><code>...\npath('json/', show_json, name='show_json'), #sesuaikan dengan nama fungsi yang dibuat\n...\n</code></pre> </li> <li> <p>Jalankan proyek Django-mu dengan perintah <code>python manage.py runserver</code> dan bukalah http://localhost:8000/tracker/json/ (sesuaikan dengan path url yang dibuat) di browser favoritmu untuk melihat hasilnya.</p> </li> </ol>"},{"location":"tutorial/tutorial-2/#tutorial-mengembalikan-data-berdasarkan-id-dalam-bentuk-xml-atau-json","title":"Tutorial: Mengembalikan Data Berdasarkan ID dalam Bentuk XML atau JSON","text":"<ol> <li> <p>Buka <code>views.py</code> yang ada pada folder <code>money_tracker</code> dan buatlah sebuah fungsi baru yang menerima parameter request dan ID (misal bernama <code>show_xml_by_id</code> dan <code>show_json_by_id</code>).</p> </li> <li> <p>Buatlah sebuah variabel di dalam fungsi tersebut yang menyimpan hasil query dari data dengan ID tertentu yang ada pada <code>TransactionRecord</code>.</p> <pre><code>data = TransactionRecord.objects.filter(pk=id)\n</code></pre> </li> <li> <p>Tambahkan return function berupa <code>HttpResponse</code> yang berisi parameter data hasil query yang sudah diserialisasi menjadi JSON atau XML dan parameter <code>content_type</code> dengan value <code>\"application/xml\"</code> (untuk format XML) atau <code>\"application/json\"</code> (untuk format JSON).</p> <ul> <li> <p>XML</p> <pre><code>return HttpResponse(serializers.serialize(\"xml\", data), content_type=\"application/xml\")\n</code></pre> </li> <li> <p>JSON</p> <pre><code>return HttpResponse(serializers.serialize(\"json\", data), content_type=\"application/json\")\n</code></pre> </li> </ul> </li> <li> <p>Buka <code>urls.py</code> yang ada pada folder <code>money_tracker</code> dan impor fungsi yang sudah kamu buat tadi.</p> <pre><code>from money_tracker.views import show_xml_by_id, show_json_by_id #sesuaikan dengan nama fungsi yang dibuat\n</code></pre> </li> <li> <p>Tambahkan path url ke dalam <code>urlpatterns</code> untuk mengakses fungsi yang sudah diimpor tadi.</p> <pre><code>...\npath('xml/&lt;int:id&gt;', show_xml_by_id, name='show_xml_by_id'),\npath('json/&lt;int:id&gt;', show_json_by_id, name='show_json_by_id'), #sesuaikan dengan nama fungsi yang dibuat\n...\n</code></pre> </li> <li> <p>Jalankan proyek Django-mu dengan perintah <code>python manage.py runserver</code> dan bukalah http://localhost:8000/tracker/xml/[id] atau http://localhost:8000/tracker/json/[id] (sesuaikan dengan path url yang dibuat dan id yang diinginkan) di browser favoritmu untuk melihat hasilnya.</p> </li> </ol>"},{"location":"tutorial/tutorial-2/#credits","title":"Credits","text":"<p>Tutorial ini dikembangkan berdasarkan PBP Ganjil 2023 yang ditulis oleh Tim Pengajar Pemrograman Berbasis Platform 2023. Segala tutorial serta instruksi yang dicantumkan pada repositori ini dirancang sedemikian rupa sehingga mahasiswa yang sedang mengambil mata kuliah Pemrograman Berbasis Platform dapat menyelesaikan tutorial saat sesi lab berlangsung.</p>"},{"location":"tutorial/tutorial-3/","title":"Tutorial 3: Autentikasi, Session, dan Cookie","text":"<p>Pemrograman Berbasis Platform (CSGE602022) - diselenggarakan oleh Fakultas Ilmu Komputer Universitas Indonesia, Semester Genap 2022/2023</p>"},{"location":"tutorial/tutorial-3/#tujuan-pembelajaran","title":"Tujuan Pembelajaran","text":"<p>Setelah menyelesaikan tutorial ini, kamu diharapkan untuk dapat:</p> <ul> <li>Memahami cara kerja autentikasi</li> <li>Memahami kegunaan cookie dan session dalam konteks pengembangan web</li> <li>Memahami cara kerja cookie dan session pada web</li> <li>Menggunakan cookie dan session sesuai dengan fungsinya</li> </ul>"},{"location":"tutorial/tutorial-3/#pengenalan-http","title":"Pengenalan HTTP","text":"<p>HTTP merupakan singkatan dari HyperText Transfer Protocol. HTTP adalah protokol yang digunakan untuk berkomunikasi antara client dan server. HTTP bersifat stateless; artinya setiap transaksi/aktivitas yang dilakukan dianggap sebagai transaksi/aktivitas yang benar-benar baru, sehingga tidak ada data sebelumnya yang disimpan untuk transaksi/aktivitas saat ini.</p> <p>Beberapa konsep dasar mengenai HTTP adalah sebagai berikut.</p> <ol> <li> <p>Client/Server: Interaksi dilakukan antar client/server. Klien melakukan request dan server memberikan response.</p> </li> <li> <p>Stateless: Setiap aktivitas (request/response) bersifat independen.</p> </li> <li> <p>OSI Layer/Model: Model Open Systems Interconnection (OSI) menjelaskan tujuh lapisan yang digunakan sistem komputer untuk berkomunikasi melalui jaringan. Model 7-layer OSI terdiri dari Application Layer, Presentation Layer, Session Layer, Transport Layer, Network Layer, Data Link Layer, dan Physical Layer.</p> </li> <li> <p>Application Layer: Situs web berjalan pada application layer. Proses request/response terjadi pada transport Layer yang umumnya menggunakan protokol TCP yang menentukan bagaimana data akan dikirim. Application Layer tidak peduli apa yang dilakukan oleh transport Layer (bagaimana data dikirim, diolah, dsb) karena application layer) hanya berfokus kepada request dan response</p> <p>Lapisan OSI lainnya akan diajarkan pada mata kuliah Jaringan Komputer/Jaringan Komunikasi Data. Kamu dapat mencarinya sendiri jika kamu penasaran. \ud83d\ude09</p> </li> <li> <p>Client Actions Method: Merupakan metode yang digunakan oleh client saat melakukan request. Contoh: GET, POST, PUT, DELETE, dll. Penjelasan lebih detail dapat dibaca di sini.</p> </li> <li> <p>Server Status Code: Merupakan status kode yang diberikan oleh server saat meminta suatu halaman web Contoh: 200 (OK), 404 (Page Not Found), 500 (Internal Server Error), dsb. Penjelasan lebih detail dapat dibaca di sini.</p> </li> <li> <p>Headers: Merupakan informasi kecil yang dikirim bersamaan dengan request dan response. Informasi-informasi tersebut berguna sebagai data tambahan yang digunakan untuk memproses request/response. Contoh: Pada headers, terdapat <code>content-type:json</code>. Artinya, tipe konten yang diminta/dikirim adalah <code>json</code>. Headers juga menyimpan data cookies.</p> </li> </ol>"},{"location":"tutorial/tutorial-3/#pengenalan-cookies-dan-session","title":"Pengenalan Cookies dan Session","text":"<p>Semua komunikasi antara klien dan server dilakukan melalui protokol HTTP, di mana HTTP merupakan stateless protocol. Artinya state yang satu dengan yang lain tidak berhubungan (independen). Hal ini mengharuskan komputer klien yang menjalankan browser untuk membuat koneksi TCP ke server setiap kali melakukan request. Tanpa adanya koneksi persisten antara klien dan server, software pada setiap sisi (endpoint) tidak dapat bergantung hanya pada koneksi TCP untuk melakukan holding state atau holding session state. Apa yang dimaksud dengan holding state?</p> <p>Sebagai contoh, kamu ingin mengakses suatu halaman A pada suatu web yang mensyaratkan pengaksesnya sudah login ke dalam web. Kemudian kamu login ke web tersebut dan berhasil membuka halaman A. Saat ingin pindah ke halaman B pada web yang sama, tanpa adanya suatu proses holding state maka kamu akan diminta untuk login kembali. Begitu yang akan terjadi setiap kali kamu mengakses halaman yang berbeda padahal masih pada web yang sama. Proses memberitahu \"siapa\" yang sedang login dan menyimpan data ini dikenal sebagai bentuk dialog antara klien-server dan merupakan dasar session - a semi-permanent exchange of information. Merupakan hal yang sulit untuk membuat HTTP melakukan holding state (karena HTTP merupakan stateless protocol). Oleh karena itu, dibutuhkan teknik untuk mengatasi masalah tersebut, yaitu cookie dan session.</p> <p>Salah satu cara yang paling banyak digunakan untuk melakukan holding state adalah dengan menggunakan session ID yang disimpan sebagai cookie pada komputer klien. Session ID dapat dianggap sebagai suatu token (barisan karakter) untuk mengenali session yang unik pada aplikasi web tertentu. Daripada menyimpan semua jenis informasi sebagai cookies pada klien seperti username, nama, dan password, hanya session ID yang disimpan. Session ID ini kemudian dapat dipetakan ke suatu struktur data pada sisi web server. Pada struktur data tersebut, kamu dapat menyimpan semua informasi yang kamu butuhkan. Pendekatan ini jauh lebih aman untuk menyimpan informasi mengenai pengguna, daripada menyimpannya pada cookie. Dengan cara ini, informasi tidak dapat disalahgunakan oleh klien atau koneksi yang mencurigakan. Selain itu, pendekatan ini lebih \"tepat\" jika data yang akan disimpan ada banyak. Hal itu karena cookie hanya dapat menyimpan maksimal 4 KB data. Bayangkan kamu sudah login ke suatu web/aplikasi dan mendapat session ID (session identifier). Untuk dapat melakukan holding state pada HTTP yang stateless, browser biasanya mengirimkan suatu session ID ke server pada setiap request. Dengan begitu, setiap kali datang suatu request, maka server akan bereaksi (kurang lebih) \"Oh, ini orang yang tepat!\". Kemudian server akan mencari informasi state di memori server atau di database berdasarkan session ID yang didapat, lalu mengembalikan data yang diminta.</p> <p>Perbedaan penting yang perlu diingat adalah data cookie disimpan pada sisi klien, sedangkan data session biasanya disimpan pada sisi server. Untuk pembahasan lebih detail mengenai stateless, stateful, cookie, dan session dapat dibaca di sini.</p> <p>Berikut tabel singkat yang menjelaskan perbedaan antara cookies, session, dan local storage secara singkat.</p> Cookies Local Storage Sessions Kapasitas 4 KB 5 MB 5 MB Teknologi Browser HTML4/HTML5 HTML5 HTML5 Aksesibilitas Semua window Semua window Tab yang sama Kedaluwarsa Diatur manual Selamanya Saat tab ditutup <p>Beberapa tautan video yang dapat memperkaya pengetahuan terkait materi ini adalah sebagai berikut.</p> <ul> <li>Session &amp; Cookies</li> <li>Cookies History</li> <li>Cookies vs. Local Storage vs. Session</li> </ul>"},{"location":"tutorial/tutorial-3/#tutorial-membuat-form-registrasi-akun","title":"Tutorial: Membuat Form Registrasi Akun","text":"<p>Catatan: Pada tutorial ini, kamu akan menggunakan proyek yang sudah kamu buat pada tutorial sebelumnya.</p> <p>Kita akan membuat akses halaman money tracker yang sebelumnya telah dibuat menjadi restricted, dengan tujuan pengguna yang ingin mengakses halaman money tracker harus mempunyai akun dan melakukan login ke situs web agar mendapatkan akses.</p> <ol> <li> <p>Jalankan virtual environment terlebih dahulu.</p> </li> <li> <p>Buka <code>views.py</code> yang ada pada folder <code>money_tracker</code> dan buatlah fungsi dengan nama <code>register</code> yang menerima parameter <code>request</code>.</p> </li> <li> <p>Tambahkan import <code>redirect</code>, <code>UserCreationForm</code>, dan <code>messages</code> pada bagian paling atas.</p> <pre><code>from django.shortcuts import redirect\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib import messages\n</code></pre> </li> <li> <p>Tambahkan potongan kode di bawah ini ke dalam fungsi <code>register</code> yang sudah kamu buat sebelumnya. Potongan kode ini berfungsi untuk menghasilkan formulir registrasi secara otomatis dan menghasilkan akun pengguna ketika data di-submit dari form.</p> <pre><code>def register(request):\nform = UserCreationForm()\nif request.method == \"POST\":\nform = UserCreationForm(request.POST)\nif form.is_valid():\nform.save()\nmessages.success(request, 'Akun telah berhasil dibuat!')\nreturn redirect('money_tracker:login')\ncontext = {'form':form}\nreturn render(request, 'register.html', context)\n</code></pre> </li> <li> <p>Buatlah berkas HTML baru dengan nama <code>register.html</code> pada folder <code>money_tracker/templates</code>. Isi dari <code>register.html</code> dapat kamu isi dengan template berikut.</p> <pre><code>{% extends 'base.html' %}\n\n{% block meta %}\n&lt;title&gt;Registrasi Akun&lt;/title&gt;\n{% endblock meta %}\n\n{% block content %}  \n\n&lt;div class = \"login\"&gt;\n&lt;h1&gt;Formulir Registrasi&lt;/h1&gt;  \n&lt;form method=\"POST\" &gt;  \n            {% csrf_token %}  \n            &lt;table&gt;  \n                {{ form.as_table }}  \n                &lt;tr&gt;  \n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;input type=\"submit\" name=\"submit\" value=\"Daftar\"/&gt;&lt;/td&gt;  \n&lt;/tr&gt;  \n&lt;/table&gt;  \n&lt;/form&gt;\n    {% if messages %}  \n        &lt;ul&gt;   \n            {% for message in messages %}  \n                &lt;li&gt;{{ message }}&lt;/li&gt;  \n                {% endfor %}  \n        &lt;/ul&gt;   \n    {% endif %}\n\n&lt;/div&gt;  \n{% endblock content %}\n</code></pre> </li> <li> <p>Buka <code>urls.py</code> yang ada pada folder <code>money_tracker</code> dan impor fungsi yang sudah kamu buat tadi.</p> <pre><code>from money_tracker.views import register #sesuaikan dengan nama fungsi yang dibuat\n</code></pre> </li> <li> <p>Tambahkan path url ke dalam <code>urlpatterns</code> untuk mengakses fungsi yang sudah diimpor tadi.</p> <pre><code>...\npath('register/', register, name='register'), #sesuaikan dengan nama fungsi yang dibuat\n...\n</code></pre> </li> </ol> <p>Kita sudah menambahkan formulir registrasi akun dan membuat mekanisme <code>register</code>. Selanjutnya, kita akan membuat form login agar pengguna dapat melakukan autentikasi akun.</p>"},{"location":"tutorial/tutorial-3/#tutorial-membuat-form-login","title":"Tutorial: Membuat Form Login","text":"<ol> <li> <p>Buka <code>views.py</code> yang ada pada folder <code>money_tracker</code> dan buatlah fungsi dengan nama <code>login_user</code> yang menerima parameter <code>request</code>.</p> </li> <li> <p>Tambahkan import <code>authenticate</code> dan <code>login</code> pada bagian paling atas.</p> <pre><code>from django.contrib.auth import authenticate, login\n</code></pre> </li> <li> <p>Tambahkan potongan kode di bawah ini ke dalam fungsi <code>login</code> yang sudah kamu buat sebelumnya. Potongan kode ini berfungsi untuk mengautentikasi pengguna yang ingin login.</p> <pre><code>def login_user(request):\nif request.method == 'POST':\nusername = request.POST.get('username')\npassword = request.POST.get('password')\nuser = authenticate(request, username=username, password=password)\nif user is not None:\nlogin(request, user)\nreturn redirect('money_tracker:show_tracker')\nelse:\nmessages.info(request, 'Username atau Password salah!')\ncontext = {}\nreturn render(request, 'login.html', context)\n</code></pre> </li> <li> <p>Buatlah berkas HTML baru dengan nama <code>login.html</code> pada folder <code>money_tracker/templates</code>. Isi dari <code>login.html</code> dapat kamu isi dengan template berikut.</p> <pre><code>{% extends 'base.html' %}\n\n{% block meta %}\n&lt;title&gt;Login&lt;/title&gt;\n{% endblock meta %}\n\n{% block content %}\n\n&lt;div class = \"login\"&gt;\n&lt;h1&gt;Login&lt;/h1&gt;\n&lt;form method=\"POST\" action=\"\"&gt;\n        {% csrf_token %}\n        &lt;table&gt;\n&lt;tr&gt;\n&lt;td&gt;Username: &lt;/td&gt;\n&lt;td&gt;&lt;input type=\"text\" name=\"username\" placeholder=\"Username\" class=\"form-control\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Password: &lt;/td&gt;\n&lt;td&gt;&lt;input type=\"password\" name=\"password\" placeholder=\"Password\" class=\"form-control\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;input class=\"btn login_btn\" type=\"submit\" value=\"Login\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/form&gt;\n    {% if messages %}\n        &lt;ul&gt;\n            {% for message in messages %}\n                &lt;li&gt;{{ message }}&lt;/li&gt;\n            {% endfor %}\n        &lt;/ul&gt;\n    {% endif %}\n\n    Belum mempunyai akun? &lt;a href=\"{% url 'money_tracker:register' %}\"&gt;Buat Akun&lt;/a&gt;\n&lt;/div&gt;\n{% endblock content %}\n</code></pre> </li> <li> <p>Buka <code>urls.py</code> yang ada pada folder <code>money_tracker</code> dan impor fungsi yang sudah kamu buat tadi.</p> <pre><code>from money_tracker.views import login_user #sesuaikan dengan nama fungsi yang dibuat\n</code></pre> </li> <li> <p>Tambahkan path url ke dalam <code>urlpatterns</code> untuk mengakses fungsi yang sudah diimpor tadi.</p> <pre><code>...\npath('login/', login_user, name='login'), #sesuaikan dengan nama fungsi yang dibuat\n...\n</code></pre> </li> <li> <p>Modifikasi variable <code>name</code> pada <code>context</code> dalam fungsi <code>show_tracker</code> yang berada pada <code>money_tracker/views.py</code> menjadi kode berikut agar dapat menampilkan nama sesuai pengguna yang logged in.</p> <pre><code>...\n'name': request.user.username,\n...\n</code></pre> </li> </ol> <p>Kita sudah menambahkan form login akun dan membuat mekanisme <code>login</code>. Selanjutnya, kita akan membuat mekanisme logout dan menambahkan tombol logout pada halaman money tracker.</p>"},{"location":"tutorial/tutorial-3/#tutorial-membuat-fungsi-logout","title":"Tutorial: Membuat Fungsi Logout","text":"<ol> <li> <p>Buka <code>views.py</code> yang ada pada folder <code>money_tracker</code> dan buatlah fungsi dengan nama <code>logout_user</code> yang menerima parameter <code>request</code>.</p> </li> <li> <p>Tambahkan import <code>logout</code> pada bagian paling atas.</p> <pre><code>from django.contrib.auth import logout\n</code></pre> </li> <li> <p>Tambahkan potongan kode di bawah ini ke dalam fungsi <code>logout</code> yang sudah kamu buat sebelumnya. Potongan kode ini berfungsi untuk melakukan mekanisme logout.</p> <pre><code>def logout_user(request):\nlogout(request)\nreturn redirect('money_tracker:login')\n</code></pre> </li> <li> <p>Bukalah berkas <code>tracker.html</code> yang ada pada folder <code>money_tracker/templates</code>.</p> </li> <li> <p>Tambahkan potongan kode di bawah ini setelah line break tag (<code>&lt;br&gt;</code>) pada berkas <code>tracker.html</code>. Potongan kode ini berfungsi untuk menambahkan tombol logout.</p> <pre><code>...\n&lt;a href=\"{% url 'money_tracker:logout' %}\"&gt;\n&lt;button&gt;\n        Logout\n    &lt;/button&gt;\n&lt;/a&gt;\n...\n</code></pre> </li> <li> <p>Buka <code>urls.py</code> yang ada pada folder <code>money_tracker</code> dan impor fungsi yang sudah kamu buat tadi.</p> <pre><code>from money_tracker.views import logout_user #sesuaikan dengan nama fungsi yang dibuat\n</code></pre> </li> <li> <p>Tambahkan path url ke dalam <code>urlpatterns</code> untuk mengakses fungsi yang sudah diimpor tadi.</p> <pre><code>...\npath('logout/', logout_user, name='logout'), #sesuaikan dengan nama fungsi yang dibuat\n...\n</code></pre> </li> </ol> <p>Kita sudah membuat mekanisme <code>logout</code> dan menyelesaikan sistem autentikasi pada proyek <code>money_tracker</code>. Selanjutnya, kita akan merestriksi akses halaman money tracker agar pengguna yang belum terautentikasi tidak dapat mengakses halaman money tracker.</p>"},{"location":"tutorial/tutorial-3/#tutorial-merestriksi-akses-halaman-money-tracker","title":"Tutorial: Merestriksi Akses Halaman Money Tracker","text":"<ol> <li> <p>Buka <code>views.py</code> yang ada pada folder <code>money_tracker</code> dan tambahkan import <code>login_required</code> pada bagian paling atas.</p> <pre><code>from django.contrib.auth.decorators import login_required\n</code></pre> </li> <li> <p>Tambahkan kode <code>@login_required(login_url='/tracker/login/')</code> di atas fungsi <code>show_tracker</code> agar halaman money tracker hanya dapat diakses oleh pengguna yang sudah login (terautentikasi). Apabila pengguna belum terautentikasi, maka aplikasi akan menampilkan halaman login kepada pengguna.</p> <pre><code>...\n@login_required(login_url='/tracker/login/')\ndef show_tracker(request):\n...\n</code></pre> </li> </ol> <p>Setelah merestriksi akses halaman money tracker, jalankan proyek Django-mu dengan perintah <code>python manage.py runserver</code> dan bukalah http://localhost:8000/tracker di browser favoritmu untuk melihat hasilnya.</p>"},{"location":"tutorial/tutorial-3/#tutorial-menambahkan-cookies","title":"Tutorial: Menambahkan Cookies","text":"<p>Sekarang, kita akan melihat penggunaan cookies dengan menambahkan data last login dan menampilkannya ke halaman money tracker.</p> <ol> <li> <p>Lakukan logout terlebih dahulu apabila kamu sedang menjalankan aplikasi Django-mu.</p> </li> <li> <p>Buka <code>views.py</code> yang ada pada folder <code>money_tracker</code> dan tambahkan import <code>HttpResponseRedirect</code>, <code>reverse</code>, dan <code>datetime</code> pada bagian paling atas.</p> <pre><code>import datetime\nfrom django.http import HttpResponseRedirect\nfrom django.urls import reverse\n</code></pre> </li> <li> <p>Pada fungsi <code>login_user</code>, kita akan menambahkan fungsi untuk menambahkan cookie yang bernama <code>last_login</code> untuk melihat kapan terakhir kali pengguna melakukan login. Caranya adalah dengan mengganti kode yang ada pada blok <code>if user is not None</code> menjadi potongan kode berikut.</p> <pre><code>...\nif user is not None:\nlogin(request, user) # melakukan login terlebih dahulu\nresponse = HttpResponseRedirect(reverse(\"money_tracker:show_tracker\")) # membuat response\nresponse.set_cookie('last_login', str(datetime.datetime.now())) # membuat cookie last_login dan menambahkannya ke dalam response\nreturn response\n...\n</code></pre> </li> <li> <p>Pada fungsi <code>show_tracker</code>, tambahkan potongan kode <code>'last_login': request.COOKIES['last_login']</code> ke dalam variabel <code>context</code>. Berikut adalah contoh kode yang sudah diubah.</p> <pre><code>context = {\n'list_of_transactions': transaction_data,\n'name': 'Kak Athal',\n'last_login': request.COOKIES['last_login'],\n}\n</code></pre> </li> <li> <p>Ubah fungsi <code>logout_user</code> menjadi seperti potongan kode berikut. Potongan kode ini menambahkan mekanisme penghapusan cookie <code>last_login</code> saat pengguna melakukan <code>logout</code>.</p> <pre><code>def logout_user(request):\nlogout(request)\nresponse = HttpResponseRedirect(reverse('money_tracker:login'))\nresponse.delete_cookie('last_login')\nreturn response\n</code></pre> </li> <li> <p>Buka berkas <code>tracker.html</code> dan tambahkan potongan kode berikut di antara tabel dan line break tag untuk menampilkan data last login.</p> <pre><code>...\n&lt;h5&gt;Sesi terakhir login: {{ last_login }}&lt;/h5&gt;\n...\n</code></pre> </li> <li> <p>Silakan refresh halaman login (atau jalankan proyek Django-mu dengan perintah <code>python manage.py runserver</code> jika kamu belum menjalankan proyekmu) dan cobalah untuk login. Data last login kamu akan muncul di halaman money tracker.</p> </li> <li> <p>Untuk melihat data cookie <code>last_login</code>, kamu dapat mengakses fitur inspect element dan membuka bagian Application/Storage. Klik bagian Cookies dan kamu dapat melihat data cookies yang tersedia. Selain <code>last_login</code>, kamu juga dapat melihat data <code>sessionid</code> dan <code>csrftoken</code>.</p> </li> <li> <p>Jika kamu melakukan logout dan membuka bagian riwayat cookie, cookie yang dibuat sebelumnya akan hilang dan dibuat ulang ketika kamu login kembali.</p> </li> </ol>"},{"location":"tutorial/tutorial-3/#akhir-kata","title":"Akhir Kata","text":"<p>Selamat! Kamu telah menyelesaikan Tutorial 3 dengan baik. \ud83d\ude04</p> <p>Setelah kamu menyelesaikan seluruh tutorial di atas, harapannya kamu sekarang lebih paham tentang penggunaan form, autentikasi, session, dan cookie pada framework Django.</p> <p>Seperti biasa, jangan lupa untuk melakukan <code>add</code>, <code>commit</code>, dan <code>push</code> perubahan yang sudah kamu lakukan untuk menyimpannya ke dalam repositori GitHub sebelum kamu menutup pekerjaan kamu. \ud83d\ude09</p>"},{"location":"tutorial/tutorial-3/#credits","title":"Credits","text":"<p>Tutorial ini dikembangkan berdasarkan PBP Ganjil 2023 yang ditulis oleh Tim Pengajar Pemrograman Berbasis Platform 2023. Segala tutorial serta instruksi yang dicantumkan pada repositori ini dirancang sedemikian rupa sehingga mahasiswa yang sedang mengambil mata kuliah Pemrograman Berbasis Platform dapat menyelesaikan tutorial saat sesi lab berlangsung</p>"},{"location":"tutorial/tutorial-4/","title":"Tutorial 4: Desain Web Menggunakan HTML dan CSS3 &amp; Metode Update dan Delete pada Data","text":"<p>Pemrograman Berbasis Platform (CSGE602022) - diselenggarakan oleh Fakultas Ilmu Komputer Universitas Indonesia, Semester Genap 2022/2023</p>"},{"location":"tutorial/tutorial-4/#tujuan-pembelajaran","title":"Tujuan Pembelajaran","text":"<p>Setelah menyelesaikan tutorial ini, mahasiswa diharapkan untuk dapat:</p> <ul> <li>Memahami konsep update dan delete</li> <li>Memahami cara update dan delete pada Django</li> <li>Memahami susunan tag pada HTML5</li> <li>Mengetahui berbagai jenis tag HTML5</li> <li>Memahami sintaks penulisan CSS</li> <li>Memahami konsep static files pada Django</li> <li>Memahami penggunaan selector pada CSS</li> </ul>"},{"location":"tutorial/tutorial-4/#pengenalan-html","title":"Pengenalan HTML","text":"<p>Silakan pelajari dan mencoba sendiri HTML pada referensi ini.</p> <p>Perbedaan antara HTML dan HTML5 bisa kamu baca pada referensi ini.</p>"},{"location":"tutorial/tutorial-4/#pengenalan-css","title":"Pengenalan CSS","text":""},{"location":"tutorial/tutorial-4/#apa-itu-css","title":"Apa itu CSS?","text":"<p>Cascading Style Sheets (CSS) adalah bahasa yang digunakan untuk mendeskripsikan tampilan dan format dari sebuah situs web yang ditulis pada markup language (seperti HTML). Kegunaannya menjadikan tampilan situs web lebih menarik.</p> <p>Untuk mempelajari perbedaan antara CSS dan CSS3 bisa kamu baca pada referensi ini.</p>"},{"location":"tutorial/tutorial-4/#cara-penulisan-css","title":"Cara Penulisan CSS","text":"<p>Secara umum, CSS dapat dituliskan dalam bentuk sebagai berikut.</p> <pre><code>selector {\nproperties: value;\n}\n</code></pre> <p>Silakan pelajari dan mencoba sendiri CSS pada referensi ini.</p> <p>Terdapat tiga jenis cara penulisan CSS:</p> <ol> <li>Inline Styles</li> <li>Internal Style Sheet</li> <li>External Style Sheet</li> </ol> <p>Silakan pelajari tentang ketiga jenis CSS tersebut pada referensi ini.</p> <p>Perlu diperhatikan, jika kamu membuat jenis External Style Sheet, kamu perlu menambahkan tag <code>{% load staticfiles %}</code> pada halaman HTML kamu. Contohnya seperti potongan kode di bawah ini.</p> <pre><code>{% load staticfiles %}\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Tutorial CSS Yay&lt;/title&gt;\n&lt;link rel=\"stylesheet\" href=\"{% static 'css/tutorial.css' %}\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div&gt;\n&lt;h1&gt;Tutorial CSS Yay&lt;/h1&gt;\n&lt;/div&gt;\n&lt;div id=\"main\"&gt;\n&lt;div&gt;\n&lt;p&gt;published: 04 Oktober 2021&lt;/p&gt;\n&lt;h1&gt;&lt;a href=\"\"&gt;Tutorial CSS ku&lt;/a&gt;&lt;/h1&gt;\n&lt;p&gt;Yay ini tutorial yang gampang!&lt;/p&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Hal ini dapat terjadi karena CSS merupakan static files di Django. Static files akan dijelaskan pada bagian selanjutnya.</p>"},{"location":"tutorial/tutorial-4/#catatan-tambahan","title":"Catatan Tambahan","text":"<p>Jika terdapat lebih dari satu style yang didefinisikan untuk suatu elemen, maka style yang akan diterapkan adalah yang memiliki prioritas yang lebih tinggi. Berikut ini urutan prioritasnya, nomor 1 yang memiliki prioritas paling tinggi.</p> <ol> <li>Inline style</li> <li>External dan internal style sheets</li> <li>Browser default</li> </ol>"},{"location":"tutorial/tutorial-4/#static-files-pada-django","title":"Static files pada Django","text":"<p>Pada framework Django, terdapat file-file yang disebut dengan static files. Static files merupakan file-file pendukung HTML pada suatu situs web. Contoh static files antara lain seperti CSS, JavaScript dan gambar. Pengaturan untuk static files terletak pada file <code>settings.py</code>.</p> <pre><code>  ...\n# Static files (CSS, JavaScript, Images)\n# httpsdocs.djangoproject.comen1.9howtostatic-files\nSTATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')\nSTATIC_URL = 'static'\n...\n</code></pre> <p>Pada <code>settings.py</code>, terdapat <code>STATIC_ROOT</code> yang menentukan absolute path ke direktori static files ketika menjalankan perintah <code>collectstatic</code> pada proyek dan terdapat <code>STATIC_URL</code> yang merupakan URL yang dapat diakses publik untuk memperoleh static files tersebut.</p> <p>Perintah <code>collectstatic</code> adalah perintah untuk mengumpulkan static files dari semua app sehingga mempermudah akses untuk semua app.</p> <p>Penjelasan lebih lengkap mengenai static files dapat kamu baca pada referensi ini.</p>"},{"location":"tutorial/tutorial-4/#selector-pada-css","title":"Selector pada CSS","text":"<p>Pada bagian ini kamu akan mempelajari 3 buah selector pada CSS, yaitu element selector, class selector, dan ID selector.</p> <ol> <li> <p>Element Selector</p> <p>Element selector menggunakan tag HTML sebagai selector untuk mengubah properti yang terdapat dalam tag tersebut.</p> <pre><code>h1 {\ncolor: #fca205;\nfont-family: \"Monospace\";\nfont-style: italic;\n}\n</code></pre> </li> <li> <p>ID Selector</p> <p>ID selector menggunakan ID pada tag sebagai selector-nya.</p> <p>Kamu dapat menambahkan ID pada templat HTML sebagai berikut (ID harus bersifat unik).</p> <pre><code>...\n&lt;body&gt;\n&lt;div id=\"header\"&gt;\n&lt;h1&gt;Tutorial CSS Yay&lt;/h1&gt;\n&lt;/div&gt;\n...\n&lt;/body&gt;\n</code></pre> <p>Kemudian tambahkan ID tersebut sebagai selector pada file CSS kamu.</p> <pre><code>#header {\nbackground-color: #f0f0f0;\nmargin-top: 0;\npadding: 20px 20px 20px 40px;\n}\n</code></pre> <p>Dapat dilihat perubahan tampilan yang terjadi. Silakan menambahkan ID selector lain untuk mengubah properti lainnya.</p> </li> <li> <p>Class Selector</p> <p>Selanjutnya, class selector yang dapat digunakan untuk memperindah tampilan templat HTML. Tambahkan beberapa class pada tag HTML</p> <pre><code>...\n&lt;div id=\"main\"&gt;\n&lt;div class=\"content_section\"&gt;\n&lt;p class=\"date\"&gt;published: 28 September 2022&lt;/p&gt;\n&lt;h2&gt;&lt;a href=\"\"&gt;Tutorial CSS ku&lt;/a&gt;&lt;/h2&gt;\n&lt;p id=\"content_1\"&gt;Yay ini tutorial yang gampang!&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"content_section\"&gt;\n&lt;p class=\"date \"&gt;published: 29 September 2022&lt;/p&gt;\n&lt;h2&gt;&lt;a href=\"\"&gt;Tutorial CSS mu&lt;/a&gt;&lt;/h2&gt;\n&lt;p id=\"content_2\"&gt;Yay ini tutorial yang mudah!&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"content_section\"&gt;\n&lt;p&gt;published: 30 September 2022&lt;/p&gt;\n&lt;h2&gt;&lt;a href=\"\"&gt;Tutorial CSS semua&lt;/a&gt;&lt;/h2&gt;\n&lt;p id=\"content_3\"&gt;Yay ini tutorial yang tidak sulit!&lt;/p&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n...\n</code></pre> <p>Kemudian taambahkan class selector berikut pada file CSS kamu.</p> <pre><code>.content_section {\nbackground-color: #3696e1;\nmargin-bottom: 30px;\ncolor: #000000;\nfont-family: cursive;\npadding: 20px 20px 20px 40px;\n}\n</code></pre> <p>Silakan menambahkan class selector lain untuk mengubah properti lainnya.</p> </li> </ol> <p>Perbedaan penulisan ID selector dan class selector adalah ID selector menggunakan format <code>#[id_name]</code> (selalu diawali <code>#</code>) sedangkan class selector menggunakan format <code>.[class_name]</code> (diawali <code>.</code>).</p> <p>Untuk memperdalam pengetahuan mengenai CSS Selector Reference, kamu dapat membaca referensi ini.</p>"},{"location":"tutorial/tutorial-4/#tips-trik-untuk-css","title":"Tips &amp; Trik untuk CSS","text":""},{"location":"tutorial/tutorial-4/#mengenal-combinators","title":"Mengenal Combinators","text":"<p>Setelah mengetahui selector pada CSS, kamu dapat mengenal combinators pada CSS. Combinators adalah suatu penanda yang menandakan hubungan antar elemen, class, atau ID pada CSS.</p> <p>Terdapat empat combinators pada CSS.</p> <ol> <li>Descendant selector (space)</li> <li>Child selector (&gt;)</li> <li>Adjacent sibling selector (+)</li> <li>General sibling selector (~)</li> </ol> <p>Silakan pelajari keempat jenis combinators tersebut CSS tersebut pada referensi ini.</p>"},{"location":"tutorial/tutorial-4/#mengenal-css-pseudo-class","title":"Mengenal CSS Pseudo-class","text":"<p>Pseudo-class digunakan untuk mendefinisikan state khusus dari sebuah elemen. Contoh beberapa pseudo-class adalah sebagai berikut.</p> <ul> <li>:active memilih elemen yang sedang aktif</li> <li>:checked memilih elemen yang telah dicentang</li> <li>:disabled memilih elemen yang telah dinonaktifkan</li> <li>:enabled memilih elemen yang telah diaktifkan</li> <li>:link memilih tautan yang belum pernah dikunjungi</li> <li>:hover memilih elemen pada saat kursor berada diatasnya</li> <li>:visited memilih link yang sudah pernah dikunjungi</li> </ul> <p>Umumnya pseudo-class dituliskan dalam bentuk sebagai berikut.</p> <pre><code>selector:pseudo-class {\nproperties: value;\n}\n</code></pre>"},{"location":"tutorial/tutorial-4/#perbedaan-margin-border-dan-padding","title":"Perbedaan Margin, Border dan Padding","text":"<p>Kamu dapat melihat perbedaan margin, border, dan padding pada referensi ini.</p>"},{"location":"tutorial/tutorial-4/#pengenalan-bootstrap","title":"Pengenalan Bootstrap","text":"<p>Terdapat banyak framework CSS yang sering digunakan sekarang ini, salah satunya adalah Bootstrap CSS. Bootstrap CSS menyediakan class-class yang sering digunakan dalam pengembangan suatu situs web. Class-class yang disediakan seperti navbar, card, footer, carousel, dan lain-lain. Selain itu, Bootstrap CSS juga menyediakan banyak fitur yang berguna. Salah satu fitur yang berguna pada Bootstrap CSS adalah grid system yang berguna untuk membagi halaman situs web menjadi lebih mudah dan menarik.</p> <p>Untuk mempelajari lebih lanjut mengenai Bootstrap CSS, kamu dapat membaca referensi ini.</p>"},{"location":"tutorial/tutorial-4/#responsive-web-design","title":"Responsive Web Design","text":"<p>Responsive web design merupakan metode atau pendekatan sistem desain web yang bertujuan untuk memberikan tampilan situs web yang terlihat baik pada semua perangkat (baik pada komputer meja, tablet, atau ponsel). Responsive web design tidak mengubah konten yang ada pada situs web, melainkan hanya mengubah cara penyajian pada setiap perangkat agar sesuai dengan ukuran layar dan perilaku perangkat masing-masing. Responsive web design menggunakan CSS untuk mengubah ukuran (seperti menyusutkan dan membesarkan) suatu elemen.</p> <p>Untuk mengecek penerapan responsive web design pada suatu situs web, kamu dapat mengakses situs web tersebut dan membuka fitur <code>Toggle Device Mode</code> pada browser.</p> <p>Berikut adalah keyboard shortcut untuk mengakes fitur tersebut pada browser Google Chrome.</p> <ul> <li>Windows/Linux : <code>CTRL + SHIFT + M</code></li> <li>Mac : <code>Command + Shift + M</code></li> </ul> <p>Untuk mempelajari lebih lengkap mengenai Reponsive Web Design, kamu dapat membuka referensi ini.</p>"},{"location":"tutorial/tutorial-4/#tutorial-menambahkan-bootstrap-pada-aplikasi-money-tracker","title":"Tutorial: Menambahkan Bootstrap pada Aplikasi Money Tracker","text":"<p>Berikut adalah hal yang perlu kamu lakukan untuk menyelesaikan bagian tutorial ini.</p> <ol> <li> <p>Menambahkan barisan kode yang dibutuhkan agar aplikasi kamu dapat menggunakan Bootstrap.</p> <p>Silakan merujuk kepada informasi pada laman ini.</p> </li> <li> <p>Silakan lakukan modifikasi pada tampilan aplikasi <code>money_tracker</code> kamu sekreatif mungkin dengan menggunakan Bootstrap.</p> </li> </ol>"},{"location":"tutorial/tutorial-4/#tutorial-menambahkan-navbar-pada-keseluruhan-laman-aplikasi","title":"Tutorial: Menambahkan Navbar pada Keseluruhan Laman Aplikasi","text":"<p>Tambahkan navigation bar (boleh menggunakan Bootstrap) pada halaman <code>tracker.html</code> kamu dan tampilkan nama kamu dan tombol logout pada navigation bar yang kamu buat.</p>"},{"location":"tutorial/tutorial-4/#tutorial-membuat-fungsi-untuk-memperbarui-data-transaksi","title":"Tutorial: Membuat Fungsi untuk Memperbarui Data Transaksi","text":"<p>Berikut adalah yang perlu kamu lakukan untuk menyelesaikan bagian tutorial ini.</p> <ol> <li> <p>Buat fungsi baru dengan nama <code>modify_transaction</code> yang menerima parameter <code>request</code> dan <code>id</code> pada <code>views.py</code> di folder <code>money_tracker</code> untuk melakukan perbaruan data transaksi. Kamu dapat menggunakan templat kode berikut untuk memuat fungsinya.</p> <p>Jangan lupa untuk memahami isi kodenya, ya. \ud83d\ude09</p> <pre><code>def modify_transaction(request, id):\n# Get data berdasarkan ID\ntransaction = TransactionRecord.objects.get(pk = id)\n# Set instance pada form dengan data dari transaction\nform = TransactionRecordForm(request.POST or None, instance=transaction)\nif form.is_valid() and request.method == \"POST\":\n# Simpan form dan kembali ke halaman awal\nform.save()\nreturn HttpResponseRedirect(reverse('money_tracker:show_tracker'))\ncontext = {'form': form}\nreturn render(request, \"modify_transaction.html\", context)\n</code></pre> </li> <li> <p>Buka <code>urls.py</code> yang ada pada folder <code>money_tracker</code> dan impor fungsi yang sudah kamu buat tadi.</p> <pre><code>from money_tracker.views import modify_transaction\n</code></pre> </li> <li> <p>Tambahkan path url ke dalam <code>urlpatterns</code> untuk mengakses fungsi yang sudah diimpor tadi.</p> <pre><code>...\npath('modify/&lt;int:id&gt;', modify_transaction, name='modify_transaction'), #sesuaikan dengan nama fungsi yang dibuat\n...\n</code></pre> </li> <li> <p>Buatlah sebuah berkas baru pada folder <code>money_tracker/templates</code> dengan nama <code>modify_transaction.html</code>. Kemudian, isilah file tersebut dengan templat berikut ini.</p> <pre><code>{% extends 'base.html' %}\n\n{% load static %}\n\n{% block content %}\n\n&lt;h1&gt;Ubah Data Transaksi&lt;/h1&gt;\n&lt;form method=\"POST\"&gt;\n    {% csrf_token %}\n    &lt;table&gt;\n        {{ form.as_table }}\n        &lt;tr&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;\n&lt;input type=\"submit\" value=\"Ubah\"/&gt;\n&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/form&gt;\n{% endblock %}\n</code></pre> </li> <li> <p>Bukalah berkas <code>tracker.html</code> yang ada pada folder <code>money_tracker/templates</code> dan ubahlah kode yang sudah ada menjadi seperti berikut agar terdapat tombol ubah untuk setiap transaksi.</p> <pre><code>&lt;table&gt;\n&lt;tr&gt;\n&lt;th&gt;Nama&lt;/th&gt;\n&lt;th&gt;Jenis&lt;/th&gt;\n&lt;th&gt;Jumlah&lt;/th&gt;\n&lt;th&gt;Tanggal&lt;/th&gt;\n&lt;th&gt;Deskripsi&lt;/th&gt;\n&lt;th&gt;Aksi&lt;/th&gt;\n&lt;/tr&gt;\n    {% comment %} Tambahkan data di bawah baris ini {% endcomment %}\n    {% for transaction in list_of_transactions %}\n        &lt;tr&gt;\n&lt;td&gt;{{transaction.name}}&lt;/td&gt;\n&lt;td&gt;{{transaction.type}}&lt;/td&gt;\n&lt;td&gt;{{transaction.amount}}&lt;/td&gt;\n&lt;td&gt;{{transaction.date}}&lt;/td&gt;\n&lt;td&gt;{{transaction.description}}&lt;/td&gt;\n&lt;td&gt;\n&lt;a href=\"{% url 'money_tracker:modify_transaction' transaction.pk %}\"&gt;\n&lt;button&gt;\n                        Ubah\n                    &lt;/button&gt;\n&lt;/a&gt;\n&lt;/td&gt;\n&lt;/tr&gt;\n    {% endfor %}\n&lt;/table&gt;\n...\n</code></pre> </li> </ol>"},{"location":"tutorial/tutorial-4/#tutorial-membuat-fungsi-untuk-menghapus-data-transaksi","title":"Tutorial: Membuat Fungsi untuk Menghapus Data Transaksi","text":"<p>Berikut adalah yang perlu kamu lakukan untuk membuat fungsi penghapusan data transaksi.</p> <ol> <li> <p>Buat fungsi baru dengan nama <code>delete_transaction</code> yang menerima parameter <code>request</code> dan <code>id</code> pada <code>views.py</code> di folder <code>money_tracker</code> untuk melakukan delete data transaksi. Kamu dapat menggunakan templat kode berikut untuk memuat fungsinya.</p> <p>Jangan lupa untuk memahami isi kodenya, ya. \ud83d\ude09</p> <pre><code>def delete_transaction(request, id):\n# Get data berdasarkan ID\ntransaction = TransactionRecord.objects.get(pk = id)\n# Hapus data\ntransaction.delete()\n# Kembali ke halaman awal\nreturn HttpResponseRedirect(reverse('money_tracker:show_tracker'))\n</code></pre> </li> <li> <p>Buka <code>urls.py</code> yang ada pada folder <code>money_tracker</code> dan impor fungsi yang sudah kamu buat tadi.</p> <pre><code>from money_tracker.views import delete_transaction\n</code></pre> </li> <li> <p>Tambahkan path url ke dalam <code>urlpatterns</code> untuk mengakses fungsi yang sudah diimpor tadi.</p> <pre><code>...\npath('delete/&lt;int:id&gt;', delete_transaction, name='delete_transaction'), #sesuaikan dengan nama fungsi yang dibuat\n...\n</code></pre> </li> <li> <p>Bukalah berkas <code>tracker.html</code> yang ada pada folder <code>money_tracker/templates</code> dan ubahlah kode yang sudah ada menjadi seperti berikut agar terdapat tombol hapus untuk setiap transaksi.</p> <pre><code>&lt;table&gt;\n&lt;tr&gt;\n&lt;th&gt;Nama&lt;/th&gt;\n&lt;th&gt;Jenis&lt;/th&gt;\n&lt;th&gt;Jumlah&lt;/th&gt;\n&lt;th&gt;Tanggal&lt;/th&gt;\n&lt;th&gt;Deskripsi&lt;/th&gt;\n&lt;th&gt;Aksi&lt;/th&gt;\n&lt;/tr&gt;\n    {% comment %} Tambahkan data di bawah baris ini {% endcomment %}\n    {% for transaction in list_of_transactions %}\n        &lt;tr&gt;\n&lt;td&gt;{{transaction.name}}&lt;/td&gt;\n&lt;td&gt;{{transaction.type}}&lt;/td&gt;\n&lt;td&gt;{{transaction.amount}}&lt;/td&gt;\n&lt;td&gt;{{transaction.date}}&lt;/td&gt;\n&lt;td&gt;{{transaction.description}}&lt;/td&gt;\n&lt;td&gt;\n&lt;a href=\"{% url 'money_tracker:modify_transaction' transaction.pk %}\"&gt;\n&lt;button&gt;\n                      Ubah\n                  &lt;/button&gt;\n&lt;/a&gt;\n&lt;a href=\"{% url 'money_tracker:delete_transaction' transaction.pk %}\"&gt;\n&lt;button&gt;\n                      Hapus\n                  &lt;/button&gt;\n&lt;/a&gt;\n&lt;/td&gt;\n&lt;/tr&gt;\n    {% endfor %}\n&lt;/table&gt;\n...\n</code></pre> </li> </ol> <p>Jalankan proyek Django-mu dan cobalah untuk menghapus data transaksi yang sudah ada pada browser favoritmu.</p>"},{"location":"tutorial/tutorial-4/#referensi-tambahan","title":"Referensi Tambahan","text":"<ul> <li>Kamu dapat membuka tautan ini untuk melihat kode yang dapat kamu gunakan untuk menambahkan navigation bar dengan menggunakan Bootstrap.</li> <li>Kamu dapat membuka tautan ini untuk melihat kode yang dapat kamu gunakan untuk menambahkan navigation bar dengan menggunakan CSS secara manual.</li> </ul>"},{"location":"tutorial/tutorial-4/#akhir-kata","title":"Akhir Kata","text":"<p>Selamat! Kamu telah menyelesaikan Tutorial 4 dengan baik. \ud83d\ude04</p> <p>Seperti biasa, jangan lupa untuk melakukan <code>add</code>, <code>commit</code>, dan <code>push</code> perubahan yang sudah kamu lakukan untuk menyimpannya ke dalam repositori GitHub sebelum kamu menutup pekerjaan kamu. \ud83d\ude09</p>"},{"location":"tutorial/tutorial-4/#credits","title":"Credits","text":"<p>Tutorial ini dikembangkan berdasarkan PBP Ganjil 2023 yang ditulis oleh Tim Pengajar Pemrograman Berbasis Platform 2023. Segala tutorial serta instruksi yang dicantumkan pada repositori ini dirancang sedemikian rupa sehingga mahasiswa yang sedang mengambil mata kuliah Pemrograman Berbasis Platform dapat menyelesaikan tutorial saat sesi lab berlangsung.</p>"},{"location":"tutorial/tutorial-5/","title":"Tutorial 5: JavaScript dan AJAX","text":"<p>Pemrograman Berbasis Platform (CSGE602022) - diselenggarakan oleh Fakultas Ilmu Komputer Universitas Indonesia, Semester Genap 2022/2023</p>"},{"location":"tutorial/tutorial-5/#tujuan-pembelajaran","title":"Tujuan Pembelajaran","text":"<p>Setelah menyelesaikan tutorial ini, mahasiswa diharapkan untuk mengerti:</p> <ul> <li>Penggunaan fungsi JavaScript pada front-end development</li> <li>Penggunaan dasar JavaScript</li> <li>Penggunaan AJAX</li> </ul>"},{"location":"tutorial/tutorial-5/#pengenalan-javascript","title":"Pengenalan JavaScript","text":""},{"location":"tutorial/tutorial-5/#apa-itu-javascript","title":"Apa itu JavaScript?","text":"<p>JavaScript merupakan bahasa pemrograman multi-paradigma tingkat tinggi lintas platform (cross platform high-level multi-paradigm programming language). Sifat multi-paradigma membuat JavaScript mendukung konsep object-oriented programming, imperative programming, dan functional programming. JavaScript sendiri merupakan implementasi dari ECMAScript, yang merupakan inti dari bahasa JavaScript. Beberapa implementasi lain dari ECMAScript yang mirip dengan JavaScript antara lain JScript (Microsoft) dan ActionScript (Adobe).</p> <p>JavaScript, bersama dengan HTML dan CSS, menjadi tiga teknologi utama yang dipakai pada pengembangan web. Keuntungan menggunakan JavaScript dalam pengembangan web, pada dasarnya, antara lain JavaScript dapat memanipulasi halaman web secara dinamis dan memberikan interaksi lebih kepada pengguna. Oleh karena itu, hampir semua situs web modern saat ini menggunakan JavaScript dalam halaman web mereka untuk memberikan pengalaman terbaik kepada pengguna. Beberapa contoh hal yang dapat kita lakukan dengan menggunakan JavaScript antara lain menampilkan informasi berdasarkan waktu, mengenali jenis browser pengguna, melakukan validasi form atau data, membuat cookies (bukan kue, tapi cookies), mengganti styling dan CSS suatu element secara dinamis, dan lain-lain.</p> <p>Pada pengembangan web umumnya kode JavaScript digunakan pada client-side suatu web (Client-side JavaScript) namun beberapa jenis kode JavaScript saat ini digunakan pada server-side suatu web (Server-side JavaScript) seperti node.js. Istilah client-side menunjukkan bahwa kode JavaScript akan dieksekusi atau dijalankan pada browser pengguna, bukan pada server situs web. Hal ini berarti kompleksitas kode JavaScript tidak akan memengaruhi performa server situs web tersebut namun memengaruhi performa browser dan komputer; semakin kompleks kode JavaScript, maka semakin banyak memori komputer yang dikonsumsi oleh browser.</p> <p>Pada mata kuliah PBP, kita hanya akan fokus kepada kode client-side JavaScript.</p>"},{"location":"tutorial/tutorial-5/#bagaimana-tahapan-javascript-dieksekusi-oleh-browser","title":"Bagaimana tahapan JavaScript dieksekusi oleh browser?","text":"<p>Perhatikan diagram berikut.</p> <p></p> <p>Setelah browser mengunduh halaman HTML web maka tepat dimana tag <code>&lt;script&gt;&lt;/script&gt;</code> berada, browser akan melihat tag script tersebut, apakah tag tersebut berisi kode embedded JavaScript atau merujuk file eksternal JavaScript. Jika merujuk pada file eksternal JavaScript, maka browser akan mengunduh file tersebut terlebih dahulu.</p>"},{"location":"tutorial/tutorial-5/#cara-penulisan-javascript","title":"Cara penulisan JavaScript","text":"<p>Cara penulisan JavaScript bisa dilakukan dengan embedded JavaScript atau external JavaScript. Kode JavaScript dapat didefinisikan atau dituliskan secara embedded pada file HTML maupun secara terpisah pada file tersendiri. Jika ditulis dalam file terpisah dari HTML, ekstensi file yang digunakan untuk file JavaScript adalah <code>.js</code>. Berikut contoh beberapa pendefinisian dari JavaScript.</p> <p>JavaScript dapat diletakkan pada head atau body dari halaman HTML. Selain itu, kode JavaScript harus dimasukkan di antara tag <code>&lt;script&gt;</code> dan <code>&lt;/script&gt;</code>. Kamu dapat meletakkan lebih dari satu tag script yang berisi JavaScript pada suatu file HTML.</p>"},{"location":"tutorial/tutorial-5/#embedded-javascript-pada-html","title":"Embedded JavaScript pada HTML","text":"<p><code>index.html</code></p> <pre><code>&lt;script type=\"text/JavaScript\"&gt;\nalert(\"Hello World!\");\n&lt;/script&gt;\n</code></pre>"},{"location":"tutorial/tutorial-5/#external-javascript-pada-html","title":"External JavaScript pada HTML","text":"<p><code>index.html</code></p> <pre><code>&lt;script type=\"text/JavaScript\" src=\"js/script.js\"&gt;&lt;/script&gt;\n</code></pre> <p><code>js/script.js</code></p> <pre><code>alert(\"Hello World!\");\n</code></pre> <p>Pada file eksternal JavaScript, tag <code>&lt;script&gt;</code> tidak perlu lagi ditambahkan.</p> <p>Memisahkan JavaScript pada file tersendiri dapat memberikan beberapa keuntungan seperti kode dapat digunakan di file HTML lain, kode JavaScript dan HTML tidak bercampur sehingga lebih fokus saat mengembangkan aplikasi, serta mempercepat loading halaman. File <code>.js</code> biasanya akan di-cache oleh browser sehingga jika kita membuka halaman yang sama dan tidak ada perubahan pada file <code>.js</code>, maka browser tidak akan meminta file <code>.js</code> tersebut kepada server lagi, namun akan menggunakan file dari cache yang sudah disimpan sebelumnya.</p>"},{"location":"tutorial/tutorial-5/#eksekusi-javascript","title":"Eksekusi JavaScript","text":"<p>Setelah JavaScript sudah terunduh dengan sempurna, maka browser akan langsung mulai mengeksekusi kode JavaScript. Jika kode tersebut BUKAN merupakan event-triggered, maka kode langsung dieksekusi. Jika kode tersebut merupakan event-triggered, maka kode tersebut hanya akan dieksekusi jika event yang didefinisikan terpicu (triggered).</p> <pre><code>// langsung dieksekusi\nalert(\"Hello World\");\n// langsung dieksekusi\nvar obj = document.getElementById(\"object\");\n// langsung dieksekusi, menambahkan event handler onclick untuk element object\nobj.onclick = function () {\n// hanya dieksekusi jika element 'object' di klik\nalert(\"You just click the object!\");\n};\n</code></pre>"},{"location":"tutorial/tutorial-5/#sintaks-javascript","title":"Sintaks JavaScript","text":""},{"location":"tutorial/tutorial-5/#variabel","title":"Variabel","text":"<p>Mendefinisikan variabel pada JavaScript cukup mudah. Contohnya seperti berikut.</p> <pre><code>var example = 0; // var example merupakan sebuah bilangan\nvar example = \"example\"; // var example merupakan sebuah string\nvar example = true; // var example merupakan sebuah boolean\n</code></pre> <p>JavaScript dapat menampung banyak tipe data; mulai dari string, integer, hingga object sekalipun. Berbeda dengan Java yang penandaan tipe datanya dibedakan dengan head variable (contoh ingin membuat variabel dengan tipe data <code>int</code>, maka sintaknya seperti <code>int x = 9</code>), JavaScript mempunyai ciri khas loosely typed atau dynamic language, yakni kamu tidak perlu menuliskan tipe data pada head variable dan JavaScript nantinya akan secara otomatis membaca tipe data kamu berdasarkan standar yang ada (seperti pada contoh diatas).</p> <p>Ada beberapa aturan dalam pemilihan indentifiers atau nama variabel dalam JavaScript. Karakter pertama HARUS merupakan alfabet, underscore ( _ ), atau karakter dollar ($). Selain itu, JavaScript identifiers bersifat case sensitive.</p>"},{"location":"tutorial/tutorial-5/#string-concatenation","title":"String Concatenation","text":"<p>Dalam JavaScript, kita juga dapat menyambungkan <code>string</code> dengan <code>string</code> lainnya seperti pada Java.</p> <pre><code>var str1 = \"PBP\" + \" \" + \"Fun\";\nvar str2 = \"PBP\";\nvar str3 = \"Fun\";\nvar str4 = str2 + \" \" + str3;\nvar str5 = \"Fun\";\nvar str6 = `PBP ${str5}`;  // Memiliki hasil yang sama seperti \"PBP\" + \" \" + str5\n</code></pre>"},{"location":"tutorial/tutorial-5/#javascript-scope","title":"JavaScript Scope","text":""},{"location":"tutorial/tutorial-5/#variabel-lokal","title":"Variabel Lokal","text":"<p>Variabel yang didefinisikan di dalam fungsi bersifat lokal, sehingga hanya dapat diakses oleh kode didalam fungsi tersebut.</p> <pre><code>// kode diluar fungsi thisFunction() tidak dapat mengakses variabel courseName\nfunction thisFunction() {\nvar courseName = \"PBP\";\n// kode di dalam fungsi ini dapat mengakses variabel courseName\n}\n</code></pre>"},{"location":"tutorial/tutorial-5/#variabel-global","title":"Variabel Global","text":"<p>Variabel yang didefinisikan di luar fungsi bersifat global dan dapat diakses oleh kode lain dalam file JavaScript tersebut.</p> <pre><code>var courseName = \"PBP\";\nfunction thisFunction() {\n// kode di dalam fungsi ini dapat mengakses variabel courseName\n}\n</code></pre>"},{"location":"tutorial/tutorial-5/#auto-global-variable","title":"Auto Global Variable","text":"<p>Value yang di-assign pada variabel yang belum dideklarasikan otomatis menjadi global variable walaupun variabel tersebut berada di dalam suatu fungsi.</p> <pre><code>thisFunction(); // function thisFunction() perlu dipanggil terlebih dahulu\nconsole.log(courseName); // print \"PBP\" pada JavaScript console\nfunction thisFunction() {\ncourseName = \"PBP\";\n}\n</code></pre>"},{"location":"tutorial/tutorial-5/#mengakses-variabel-global-dari-html","title":"Mengakses Variabel Global dari HTML","text":"<p>Kamu dapat mengakses variabel yang berada dalam file JavaScript pada file HTML yang mengunduh file JavaScript tersebut.</p> <pre><code>...\n&lt;input type=\"text\" onclick=\"this.value=courseName\" /&gt;\n...\n</code></pre> <pre><code>...\nvar courseName = \"PBP\";\n...\n</code></pre>"},{"location":"tutorial/tutorial-5/#function-dan-event","title":"Function dan Event","text":"<p>Function adalah sekumpulan grup dari kode-kode yang bisa dipanggil dimanapun pada bagian kode program (mirip dengan <code>method</code> pada Java). Hal ini mengurangi redundansi kode yang ada (mengurangi kode-kode yang dapat sama berulang-ulang). Selain itu, function pada JavaScript sangat berguna untuk memudahkan elemen pemanggilan secara dinamis. Function dapat dipanggil sesama function dan dapat juga dipanggil karena event (akan dijelaskan di bawah). Sebagai contoh, berikut kode yang terdapat pada <code>index.html</code>.</p> <pre><code>...\n&lt;input type=\"button\" value=\"magicButton\" id=\"magicButton\" onclick=\"hooray();\" /&gt;\n...\n</code></pre> <p>Kemudian berikut adalah kode pada <code>javascript.js</code>.</p> <pre><code>...\nfunction hooray(){\nalert(\"Yahoo!\");\n}\n...\n</code></pre> <p>Apabila <code>magicButton</code> ditekan, maka fungsi <code>onclick</code> akan menjalankan function <code>hooray()</code> pada <code>javascript.js</code>, lalu muncul alert sesuai yang sudah di-assign sebelumnya.</p> <p>Kode <code>onclick</code> sebenarnya adalah salah satu contoh kemampuan JavaScript yang disebut event. Event adalah kemampuan JavaScript untuk membuat sebuah situs web dinamis. Maksud dari <code>onclick</code> adalah penanda apa yang akan dilakukan JavaScript jika elemen tersebut ditekan. Selain itu, event biasanya diberikan sebuah fungsi yang berguna sebagai perintah-perintah untuk JavaScript. Selain itu, banyak contoh-contoh event lainnya seperti <code>onchange</code>, <code>onmouseover</code>, <code>onmouseout</code>, dan lain sebagainya yang bisa kamu baca pada tautan ini.</p>"},{"location":"tutorial/tutorial-5/#javascript-html-css-dom","title":"JavaScript HTML &amp; CSS DOM","text":""},{"location":"tutorial/tutorial-5/#html-dom","title":"HTML DOM","text":"<p>HTML DOM (Document Object Model) adalah standar bagaimana mengubah, mengambil, dan menghapus HTML elements. HTML DOM dapat diakses melalui JavaScript atau dengan bahasa pemrograman lainnya. Detail lengkapnya dapat dilihat di sini.</p> <p>Berikut contoh implementasinya.</p> <pre><code>...     \n&lt;div&gt;\n&lt;p onclick=\"myFunction()\" id=\"demo\"&gt;Example of HTML DOM&lt;/p&gt;\n&lt;/div&gt;\n...\n</code></pre> <pre><code>...\nfunction myFunction() {\ndocument.getElementById(\"demo\").innerHTML = \"YOU CLICKED ME!\";\n}\n...\n</code></pre>"},{"location":"tutorial/tutorial-5/#css-dom","title":"CSS DOM","text":"<p>Sama dengan HTML DOM, CSS DOM dapat mengubah CSS secara dinamis melalui JavaScript. Detail lengkapnya dapat dilihat di sini.</p> <p>Berikut adalah contohnya.</p> <p><code>index.html</code></p> <pre><code>...\n&lt;p id=\"blueText\" onclick=\"changeColor()\"&gt;Click me v2&lt;/p&gt;\n...\n</code></pre> <p><code>javascript.js</code></p> <pre><code>...\nfunction changeColor(){\ndocument.getElementById(\"blueText\").style.color=\"blue\";\n}\n...\n</code></pre>"},{"location":"tutorial/tutorial-5/#pengenalan-ajax","title":"Pengenalan AJAX","text":"<p>AJAX merupakan singkatan dari Asynchronous JavaScript And XML.</p> <p>AJAX bukanlah sebuah bahasa pemrograman. AJAX menggunakan browser untuk meminta data dari web server dan JavaScript serta HTML DOM untuk menampilkan data. AJAX dapat menggunakan XML untuk mengirim data tetapi dapat juga menggunakan teks ataupun JSON. AJAX membuat halaman web memperbarui data secara asinkronus dengan mengirimkan data ke server di balik layar, artinya kita dapat memperbarui sebagian elemen data pada halaman tanpa harus me-reload keseluruhan halaman.</p> <p>Berikut ini adalah cara kerja AJAX.</p> <p></p> <ol> <li>Sebuah event terjadi pada halaman web (contohnya tombol submit data ditekan)</li> <li>Sebuah <code>XMLHttpRequest</code> object dibuat oleh JavaScript</li> <li><code>XMLHttpRequest</code> object mengirimkan request ke server</li> <li>Server memproses request tersebut</li> <li>Server mengembalikan response kembali kepada halaman web</li> <li>Response dibaca oleh JavaScript</li> <li>Aksi berikutnya akan dipicu oleh JavaScript sesuai dengan langkah yang dibuat (contohnya memperbarui data di halaman tersebut)</li> </ol> <p>Kamu bisa menggunakan <code>jQuery</code> untuk melakukan AJAX. JQuery adalah library JavaScript yang dibuat untuk mempermudah akses ke beberapa Core API yang disediakan oleh browser.</p> <p>Selain itu, kamu juga dapat melakukan AJAX di browser modern dengan menggunakan fungsi <code>fetch()</code> yang diberikan oleh JavaScript. Penggunaan <code>fetch()</code> untuk melakukan pemanggilan AJAX dapat dilihat di tautan berikut ini: https://www.w3schools.com/jsref/api_fetch.asp</p>"},{"location":"tutorial/tutorial-5/#tutorial-views-untuk-ajax","title":"Tutorial: Views untuk AJAX","text":"<p>Kamu diminta untuk menambahkan fungsionalitas AJAX ke projek <code>money_tracker</code> yang sudah dibuat pada tutorial sebelumnya.</p> <ol> <li> <p>Import <code>JsonResponse</code> dari <code>django.http</code>dan <code>csrf_exempt</code> dari <code>django.views.decorators.csrf</code> ke dalam file <code>views.py</code></p> </li> <li> <p>Buatlah fungsi baru dengan nama <code>create_transaction_ajax</code> yang menerima parameter <code>request</code> pada file <code>money_tracker/views.py</code>.</p> </li> <li> <p>Salinlah kode berikut pada fungsi baru tersebut (dengan <code>@csrf_exempt</code>).</p> <pre><code>@csrf_exempt\ndef create_transaction_ajax(request):  \n# create object of form\nform = TransactionRecordForm(request.POST or None)\nif form.is_valid() and request.method == \"POST\":\nform.save()\ndata = TransactionRecord.objects.last()\n# parsing the form data into json\nresult = {\n'id':data.id,\n'name':data.name,\n'type':data.type,\n'amount':data.amount,\n'date':data.date,\n'description':data.description,\n}\nreturn JsonResponse(result)\ncontext = {'form': form}\nreturn render(request, \"create_transaction.html\", context)\n</code></pre> </li> <li> <p>Import function yang telah kamu buat sebelumnya pada <code>money_tracker/urls.py</code>.</p> <pre><code># contoh\nfrom money_tracker.views import create_transaction_ajax\n</code></pre> </li> <li> <p>Tambahkan path baru untuk membuat objek transaksi baru dengan baris kode berikut ini pada <code>urlpatterns</code>.</p> <pre><code>...\npath('create-ajax/', create_transaction_ajax, name='create_transaction_ajax'),\n</code></pre> </li> <li> <p>Modifikasi file <code>money_tracker/tracker.html</code> dengan kode baru berikut ini agar dapat menambahkan data baru dengan AJAX.</p> <pre><code>{% extends 'base.html' %}\n\n{% block content %}\n&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"&gt;&lt;/script&gt;\n</code></pre> </li> <li> <p>Tambahkan potongan kode berikut untuk menampilkan data transaksi dalam bentuk cards.</p> <pre><code>&lt;script&gt;\n$(document).ready(function(){\n$.get(\"/tracker/json/\", function(data) {\nfor (i=0; i&lt;data.length; i++){\n$('#tracker').append(`\n            &lt;div id=\"${data[i].id}--task\" class=\"col-md-6 col-lg-3 mb-3\"&gt;\n                &lt;div class=\"card d-flex\"&gt;\n                    &lt;div class=\"card-body d-flex flex-column\"&gt;\n                        &lt;h5 class=\"card-title\"&gt;${data[i].fields.name}&lt;/h5&gt;\n                        &lt;p class=\"card-text date\"&gt;${data[i].fields.date}&lt;/p&gt;\n                        &lt;p class=\"card-text\"&gt;${data[i].fields.type}&lt;/p&gt;\n                        &lt;p class=\"card-text\"&gt;${data[i].fields.amount}&lt;/p&gt;\n                        &lt;p class=\"card-text\"&gt;${data[i].fields.description}&lt;/p&gt;\n                        &lt;div class=\"mt-auto\"&gt;\n                            &lt;a href=\"/tracker/delete/${data[i].pk}\" class=\"btn btn-primary delete mb-2\"&gt;Hapus&lt;/a&gt;\n                            &lt;a href=\"/tracker/modify/${data[i].pk}\" class=\"btn btn-secondary mb-2\"&gt;Ubah&lt;/a&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            `)\n}\n});\n&lt;/script&gt;\n</code></pre> </li> <li> <p>Tambahkan kode berikut untuk membuat sebuah modal popup yang berfungsi untuk menambahkan transaksi baru pada laman tracker.</p> <pre><code>&lt;body&gt;\n&lt;h5&gt;Nama: &lt;/h5&gt;\n&lt;p&gt;{{name}}&lt;/p&gt;\n&lt;button type=\"button\" class=\"btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#createModal\"&gt;\n        Tambah Transaksi\n    &lt;/button&gt;\n&lt;!-- Modal --&gt;\n&lt;div class=\"modal\" id=\"createModal\" tabindex=\"-1\" aria-labelledby=\"createModalLabel\" aria-hidden=\"true\"&gt;\n&lt;div class=\"modal-dialog\"&gt;\n&lt;div class=\"modal-content\"&gt;\n&lt;div class=\"modal-header\"&gt;\n&lt;h1 class=\"modal-title fs-5\" id=\"createModalLabel\"&gt;Tambah Transaksi&lt;/h1&gt;\n&lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Cancel\"&gt;&lt;/button&gt;\n&lt;/div&gt;\n&lt;div class=\"modal-body\"&gt;\n            {% csrf_token %}\n            &lt;label for=\"name\" class=\"form-label\"&gt;Judul transaksi:&lt;/label&gt;&lt;br&gt;\n&lt;input type=\"text\" id=\"name\" class=\"form-control\" name=\"name\" placeholder=\"Bayar UKT\"&gt;&lt;br&gt;\n&lt;label for=\"type\" class=\"form-label\"&gt;Tipe transaksi:&lt;/label&gt;\n&lt;select name=\"type\" id=\"type\" class=\"form-select\" aria-label=\"Default select example\"&gt;\n&lt;option selected value=\"Pemasukan\"&gt;Pemasukan&lt;/option&gt;\n&lt;option value=\"Pengeluaran\"&gt;Pengeluaran&lt;/option&gt;\n&lt;/select&gt;&lt;br&gt;\n&lt;label for=\"amount\" class=\"form-label\"&gt;Jumlah transaksi:&lt;/label&gt;&lt;br&gt;\n&lt;input type=\"number\" id=\"amount\" class=\"form-control\" name=\"amount\" placeholder=\"100000\"&gt;&lt;br&gt;\n&lt;label for=\"description\" class=\"form-label\"&gt;Deskripsi transaksi:&lt;/label&gt;&lt;br&gt;\n&lt;input type=\"text\" id=\"description\" class=\"form-control\" name=\"description\" placeholder=\"UKT untuk Bulan Mei\"&gt;&lt;br&gt;\n&lt;/div&gt;\n&lt;div class=\"modal-footer\"&gt;\n&lt;button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\"&gt;Cancel&lt;/button&gt;\n&lt;button id=\"submit_btn\" type=\"button\" class=\"btn btn-primary create\" id=\"add-task\" data-bs-dismiss=\"modal\"&gt;Add&lt;/button&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;div class=\"row m-2\" id=\"tracker\"&gt;&lt;/div&gt;\n{% endblock content %}\n</code></pre> </li> <li> <p>Modifikasi potongan kode yang sudah ditulis sebelumnya pada poin ke 6 menjadi kode berikut untuk membuat fungsi pada tombol submit modal agar dapat menambahkan data transaksi secara asinkronus.</p> <pre><code>&lt;script&gt;\n$(document).ready(function(){\n$.get(\"/tracker/json/\", function(data) {\nfor (i=0; i&lt;data.length; i++){\n$('#tracker').append(`\n                &lt;div id=\"${data[i].id}--task\" class=\"col-md-6 col-lg-3 mb-3\"&gt;\n                    &lt;div class=\"card d-flex\"&gt;\n                        &lt;div class=\"card-body d-flex flex-column\"&gt;\n                            &lt;h5 class=\"card-title\"&gt;${data[i].fields.name}&lt;/h5&gt;\n                            &lt;p class=\"card-text date\"&gt;${data[i].fields.date}&lt;/p&gt;\n                            &lt;p class=\"card-text\"&gt;${data[i].fields.type}&lt;/p&gt;\n                            &lt;p class=\"card-text\"&gt;${data[i].fields.amount}&lt;/p&gt;\n                            &lt;p class=\"card-text\"&gt;${data[i].fields.description}&lt;/p&gt;\n                            &lt;div class=\"mt-auto\"&gt;\n                                &lt;a href=\"/tracker/delete/${data[i].pk}\" class=\"btn btn-primary delete mb-2\"&gt;Hapus&lt;/a&gt;\n                                &lt;a href=\"/tracker/modify/${data[i].pk}\" class=\"btn btn-secondary mb-2\"&gt;Ubah&lt;/a&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n                `)\n}\n});\n$(\"#submit_btn\").click(function(){\n$.post(\"/tracker/create-ajax/\", {\nname: $(\"#name\").val(),\ntype: $(\"#type\").val(),\namount: $(\"#amount\").val(),\ndescription: $(\"#description\").val()\n},\nfunction(result, status){\nif (status == 'success'){\n$(\"#tracker\").append(`\n                    &lt;div id=\"${result.id}--task\" class=\"col-md-6 col-lg-3 mb-3\"&gt;\n                        &lt;div class=\"card d-flex\"&gt;\n                            &lt;div class=\"card-body d-flex flex-column\"&gt;\n                                &lt;h5 class=\"card-title\"&gt;${result.name}&lt;/h5&gt;\n                                &lt;p class=\"card-text date\"&gt;${result.date}&lt;/p&gt;\n                                &lt;p class=\"card-text\"&gt;${result.type}&lt;/p&gt;\n                                &lt;p class=\"card-text\"&gt;${result.amount}&lt;/p&gt;\n                                &lt;p class=\"card-text\"&gt;${result.description}&lt;/p&gt;\n                                &lt;div class=\"mt-auto\"&gt;\n                                    &lt;a href=\"/tracker/delete/${result.id}\" class=\"btn btn-primary delete mb-2\"&gt;Hapus&lt;/a&gt;\n                                    &lt;a href=\"/tracker/modify/${result.id}\" class=\"btn btn-secondary mb-2\"&gt;Ubah&lt;/a&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                    `);\n$('#name').val('')\n$('#date').val('')\n$('#amount').val('')\n$('#description').val('')\n}\n})\n})\n})\n&lt;/script&gt;\n</code></pre> </li> <li> <p>Jalankan aplikasi kamu dan cobalah untuk menanmbahkan beberapa data transaksi baru. Sekarang, data transaksi baru dapat ditambahkan secara asinkronus tanpa harus melakukan synchronous refresh page terlebih dahulu.</p> </li> </ol>"},{"location":"tutorial/tutorial-5/#materi-tambahan-web-storage","title":"Materi Tambahan: Web Storage","text":"<p>Dengan penyimpanan lokal, aplikasi web dapat menyimpan data secara lokal dalam browser pengguna. Hal ini berguna apabila anda menggunakan framework front-end seperti React ataupun Vue, karena kemampuan penggunaan cookies pada framework-framework tersebut terbatas. Sebelum HTML5, data aplikasi harus disimpan dalam cookies (termasuk dalam setiap permintaan server). Penyimpanan lokal bersifat lebih aman dan sejumlah besar data dapat disimpan secara lokal tanpa mempengaruhi kinerja situs web. Tidak seperti cookies, batas penyimpanan jauh lebih besar (setidaknya 5MB) dan informasi yang disimpan tidak pernah ditransfer ke server. Penyimpanan lokal adalah per asal (per domain dan protocol). Semua halaman (dari satu asal) dapat menyimpan dan mengakses data yang sama.</p> <p>Terdapat 2 cara menyimpan data menggunakan web storage.</p> <ul> <li> <p><code>window.localStorage</code> - menyimpan data tanpa tanggal kadaluarsa</p> </li> <li> <p><code>window.sessionStorage</code> - menyimpan data untuk satu session (data hilang ketika tab browser ditutup)</p> </li> </ul>"},{"location":"tutorial/tutorial-5/#obyek-localstorage","title":"Obyek localStorage","text":"<p>Objek <code>localStorage</code> menyimpan data tanpa tanggal kedaluwarsa. Data tidak akan dihapus ketika browser ditutup, dan akan tersedia pada hari berikutnya, minggu, atau tahun.</p> <p>Berikut adalah contoh implementasinya.</p> <p><code>index.html</code></p> <pre><code>...\n&lt;p&gt;&lt;button onclick=\"clickCounter()\" type=\"button\"&gt;Click me!&lt;/button&gt;&lt;/p&gt;\n&lt;div id=\"result\"&gt;&lt;/div&gt;\n&lt;p&gt;Click the button to see the counter increase.&lt;/p&gt;\n&lt;p&gt;\n  Close the browser tab (or window), and try again,\n  and the counter will continue to count (is not reset).\n&lt;/p&gt;\n...\n</code></pre> <p><code>javascript.js</code></p> <pre><code>...\nfunction clickCounter() {\nif(typeof(Storage) !== \"undefined\") {\nif (localStorage.clickcount) {\nlocalStorage.clickcount = Number(localStorage.clickcount)+1;\n} else {\nlocalStorage.clickcount = 1;\n}\ndocument.getElementById(\"result\").innerHTML = \"You have clicked the button \" + localStorage.clickcount + \" time(s).\";\n} else {\ndocument.getElementById(\"result\").innerHTML = \"Sorry, your browser does not support web storage...\";\n}\n}\n...\n</code></pre> <p>Apabila halaman tersebut dijalankan, ketika tombol ditekan maka terhitung jumlah click akan bertambah. Ketika browser ditutup dan kita membuka kembali halaman sebelumnya, dapat dilihat bahwa perhitungan jumlah click akan dilanjutkan dari yang sebelumnya.</p>"},{"location":"tutorial/tutorial-5/#obyek-sessionstorage","title":"Obyek sessionStorage","text":"<p>Objek <code>sessionStorage</code> bekerja dengan cara yang mirip dengan <code>localStorage</code> (untuk mencoba <code>sessionStorage</code>, silakan gunakan kode sebelumnya namun ganti objek <code>localStorage</code> dengan <code>sessionStorage</code>). Namun apabila browser ditutup dan halaman sebelumnya dibuka kembali, click count akan dimulai kembali dari 0.</p> <p>Untuk membaca lebih lanjut mengenai HTML5 WebStorage, silakan baca referensi berikut: HTML5 WebStorage.</p>"},{"location":"tutorial/tutorial-5/#akhir-kata","title":"Akhir Kata","text":"<p>Selamat! Kamu telah menyelesaikan tutorial Django terakhir. \ud83d\ude04</p> <p>Seperti biasa, jangan lupa untuk melakukan <code>add</code>, <code>commit</code>, dan <code>push</code> perubahan yang sudah kamu lakukan untuk menyimpannya ke dalam repositori GitHub sebelum kamu menutup pekerjaan kamu. \ud83d\ude09</p>"},{"location":"tutorial/tutorial-5/#credits","title":"Credits","text":"<p>Tutorial ini dikembangkan berdasarkan PBP Ganjil 2023 yang ditulis oleh Tim Pengajar Pemrograman Berbasis Platform 2023. Segala tutorial serta instruksi yang dicantumkan pada repositori ini dirancang sedemikian rupa sehingga mahasiswa yang sedang mengambil mata kuliah Pemrograman Berbasis Platform dapat menyelesaikan tutorial saat sesi lab berlangsung.</p>"},{"location":"tutorial/tutorial-6/","title":"Tutorial 6: Pengantar Tentang Flutter","text":"<p>Pemrograman Berbasis Platform (CSGE602022) - diselenggarakan oleh Fakultas Ilmu Komputer Universitas Indonesia, Semester Genap 2022/2023</p>"},{"location":"tutorial/tutorial-6/#tujuan-pembelajaran","title":"Tujuan Pembelajaran","text":"<p>Setelah menyelesaikan tutorial ini, mahasiswa diharapkan untuk:</p> <ul> <li>Mengerti proses instalasi Flutter.</li> <li>Mengerti dan menggunakan perintah-perintah dasar Flutter yang perlu diketahui untuk mengerjakan proyek aplikasi.</li> <li>Memahami alur dasar pembuatan dan eksekusi aplikasi Flutter.</li> <li>Memahami elemen-elemen dasar pada Flutter.</li> </ul>"},{"location":"tutorial/tutorial-6/#pengenalan-flutter","title":"Pengenalan Flutter","text":"<p>Flutter adalah sebuah framework aplikasi mobile sumber terbuka (open source) yang diciptakan oleh Google pada 2017. Flutter digunakan dalam pengembangan aplikasi untuk sistem operasi Android dan iOS. Flutter juga mendukung untuk pengembangan aplikasi berbasis web, Windows, Linux, dan MacOS secara native.</p> <p>Keuntungan dari Flutter sendiri adalah kemampuannya untuk menciptakan aplikasi untuk berbagai platform dengan hanya satu codebase. Selain itu, fitur JIT (just in time) memungkinkan pengembang aplikasi untuk melihat perubahan yang dilakukan pada codebase secara langsung tanpa harus mengulang proses kompilasi kode aplikasi dari awal.</p>"},{"location":"tutorial/tutorial-6/#instalasi-flutter","title":"Instalasi Flutter","text":"<ol> <li> <p>Akses tautan berikut sesuai dengan sistem operasi yang kamu gunakan.</p> <p>a. Mac OS</p> <p>Khusus pengguna Mac OS yang menggunakan Homebrew, kamu dapat menggunakan perintah <code>brew install --cask flutter</code> untuk menginstal Flutter.</p> <p>b. Windows</p> <p>c. Linux</p> </li> <li> <p>Instal Flutter versi terkini (latest version) dengan mengikuti panduan pada tautan di atas.</p> <p>Untuk pengguna Mac, dapat melewati tahap <code>iOS Setup</code> dan langsung ke tahap <code>Android Setup</code>.</p> </li> <li> <p>Instal IDE pilihan kamu yang akan digunakan untuk mengembangkan aplikasi Flutter.</p> <p>a. Android Studio (Recommended)</p> <p>b. Visual Studio Code</p> <p>Kamu dapat menggunakan Visual Studio Code untuk Flutter dengan menginstall ekstensi Dart dan Flutter.</p> <p>Kamu juga dapat membaca fungsionalitas IDE yang disediakan oleh ekstensi Flutter pada tautan yang tersedia.</p> </li> </ol>"},{"location":"tutorial/tutorial-6/#tutorial-getting-started-with-flutter","title":"Tutorial: Getting Started with Flutter","text":"<ol> <li> <p>Buka Terminal atau Command Prompt.</p> </li> <li> <p>Masuk ke direktori sesuai keinginan masing-masing.</p> </li> <li> <p>Generate proyek Flutter dan masuk ke dalam direktori proyek (<code>APP_NAME</code> pada proyek ini adalah money_tracker).</p> <pre><code>flutter create &lt;APP_NAME&gt;\ncd &lt;APP_NAME&gt;\n</code></pre> </li> <li> <p>Jalankan proyek melalui Terminal atau Command Prompt.</p> <pre><code>flutter run\n</code></pre> </li> <li> <p>Akan muncul tampilan seperti di bawah ini.</p> <p></p> </li> <li> <p>Lakukan <code>git init</code> pada root folder dan <code>add</code>-<code>commit</code>-<code>push</code> proyek ke sebuah repositori baru di GitHub. Kamu dapat menamai repositori barumu dengan nama <code>pbp-flutter-tutorial</code>.</p> </li> </ol>"},{"location":"tutorial/tutorial-6/#tutorial-merapikan-struktur-proyek","title":"Tutorial: Merapikan Struktur Proyek","text":"<p>Sebelum kita bermain dengan Flutter lebih lanjut, kita akan merapikan struktur file pada proyek kita terlebih dahulu agar kode proyek dapat dipahami lebih baik.</p> <ol> <li> <p>Buatlah file baru bernama <code>menu.dart</code> pada folder <code>lib</code>.</p> </li> <li> <p>Potong (cut) isi file <code>main.dart</code> dari baris 32 (<code>class MyHomePage extends StatefulWidget</code>) sampai akhir file dan tempelkan kodenya pada file <code>menu.dart</code>. Jika kamu melihat tulisan peringatan berwarna merah, jangan khawatir; kita akan menyelesaikannya setelah ini.</p> </li> <li> <p>Pada file <code>menu.dart</code>, salin dan tempel <code>import 'package:flutter/material.dart';</code> pada baris paling awal pada file.</p> <p></p> </li> <li> <p>Pada file <code>main.dart</code>, hover kursor ke kode yang bermasalah dan selesaikan masalahnya dengan mengikuti petunjuk tangkapan layar berikut</p> <p>Pilihlah opsi <code>Quick Fix</code>.</p> <p></p> <p>Pilihlah opsi <code>Import library 'package:money_tracker/menu.dart'</code>.</p> <p></p> </li> <li> <p>Coba jalankan proyek melalui Terminal atau Command Prompt untuk melihat apakah aplikasi tetap dapat berjalan.</p> </li> </ol>"},{"location":"tutorial/tutorial-6/#tutorial-membuat-widget-sederhana-pada-flutter","title":"Tutorial: Membuat Widget Sederhana pada Flutter","text":"<p>Pada tutorial kali ini, kita akan belajar membuat widget sederhana pada Flutter. Kita akan membuat widget text sebagai judul dan button sebagai menu untuk aplikasi kita. Ketika button dipencet, akan muncul notifikasi di bawah layar berupa tombol apa yang dipencet.</p> <p>Pertama-tama, kita akan mengubah tema warna aplikasi menjadi hijau.</p> <ol> <li> <p>Buka file <code>main.dart</code>.</p> </li> <li> <p>Ubahlah isi kode <code>primarySwatch</code> menjadi <code>Colors.green</code>.</p> <pre><code>primarySwatch: Colors.green,\n</code></pre> </li> <li> <p>Hapus <code>title</code> yang ada pada <code>const MyHomePage(title: 'Flutter Demo Home Page')</code> sehingga menjadi:</p> <pre><code>const MyHomePage()\n</code></pre> </li> </ol> <p>Coba jalankan proyek kamu untuk melihat apakah warna tema aplikasi sudah berubah menjadi hijau.</p> <p>Setelah mengubah warna tema aplikasi, kita akan mengubah sifat widget halaman menu menjadi stateless.</p> <ol> <li> <p>Ubah sifat widget halaman dari stateful menjadi stateless pada file <code>menu.dart</code>. Ubah <code>({super.key, required this.title})</code> menjadi <code>({Key? key}) : super(key: key);</code>. Hapus <code>final String title;</code> sampai bawah serta tambahkan Widget <code>build</code> sehingga kode terlihat seperti di bawah.</p> <pre><code>class MyHomePage extends StatelessWidget {\nconst MyHomePage({Key? key}) : super(key: key);\n@override\nWidget build(BuildContext context) {\nreturn Scaffold(\n...\n);\n}\n}\n</code></pre> </li> </ol> <p>Setelah mengubah sifat widget halaman menu menjadi stateless, kita akan menambahkan teks dan grid buttons yang akan menjadi menu aplikasi.</p> <ol> <li> <p>Untuk menambahkan teks dan juga grid buttons, tambahkan potongan kode berikut pada bagian <code>Widget build(BuildContext context)</code>.</p> <pre><code>return Scaffold(\nappBar: AppBar(\n// Set title aplikasi menjadi Money Tracker\ntitle: const Text( 'Money Tracker',\n),\n),\nbody: SingleChildScrollView( // Widget wrapper yang dapat discroll\nchild: Padding( padding: const EdgeInsets.all(10.0), // Set padding dari halaman\nchild: Column( // Widget untuk menampilkan children secara vertikal\nchildren: &lt;Widget&gt;[\nconst Padding(\npadding: EdgeInsets.only(top: 10.0, bottom: 10.0),\n// Widget Text untuk menampilkan tulisan dengan alignment center dan style yang sesuai\nchild: Text(\n'Selamat datang!',\ntextAlign: TextAlign.center,\nstyle: TextStyle(\nfontSize: 30,\nfontWeight: FontWeight.bold,\n),\n),\n),\n// Grid layout\nGridView.count(\nprimary: true,\npadding: const EdgeInsets.all(20),\ncrossAxisSpacing: 10,\nmainAxisSpacing: 10,\ncrossAxisCount: 3,\nshrinkWrap: true,\nchildren: &lt;Widget&gt;[\nMaterial(\ncolor: Colors.green,\nchild: InkWell( // Area responsive terhadap sentuhan\nonTap: () {\n// Memunculkan SnackBar ketika diklik\nScaffoldMessenger.of(context)\n..hideCurrentSnackBar()\n..showSnackBar(const SnackBar(\ncontent: Text(\"Kamu telah menekan tombol Lihat Riwayat Transaksi!\")));\n},\nchild: Container( // Container untuk menyimpan Icon dan Text\npadding: const EdgeInsets.all(8),\nchild: Center(\nchild: Column(\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: const [\nIcon(\nIcons.list_alt,\ncolor: Colors.white,\nsize: 30.0,\n),\nPadding(padding: EdgeInsets.all(3)),\nText(\n\"Lihat Riwayat Transaksi\",\ntextAlign: TextAlign.center,\nstyle: TextStyle(color: Colors.white),\n),\n],\n),\n),\n),\n),\n),\nMaterial(\ncolor: Colors.green,\nchild: InkWell(\nonTap: () {\nScaffoldMessenger.of(context)\n..hideCurrentSnackBar()\n..showSnackBar(const SnackBar(\ncontent: Text(\"Kamu telah menekan tombol Tambah Transaksi!\")));\n},\nchild: Container(\npadding: const EdgeInsets.all(8),\nchild: Center(\nchild: Column(\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: const [\nIcon(\nIcons.add_box,\ncolor: Colors.white,\nsize: 40.0,\n),\nPadding(padding: EdgeInsets.all(1)),\nText(\n\"Tambah Transaksi\",\ntextAlign: TextAlign.center,\nstyle: TextStyle(color: Colors.white),\n),\n],\n),\n),\n),\n),\n),\nMaterial(\ncolor: Colors.green,\nchild: InkWell(\nonTap: () {\nScaffoldMessenger.of(context)\n..hideCurrentSnackBar()\n..showSnackBar(const SnackBar(\ncontent: Text(\"Kamu telah menekan tombol Logout!\")));\n},\nchild: Container(\npadding: const EdgeInsets.all(8),\nchild: Center(\nchild: Column(\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: const [\nIcon(\n// Kamu juga dapat mengggunakan icon lainnya\n// seperti Icons.logout\nIcons.door_back_door,\ncolor: Colors.white,\nsize: 30.0,\n),\nPadding(padding: EdgeInsets.all(3)),\nText(\n\"Logout\",\ntextAlign: TextAlign.center,\nstyle: TextStyle(color: Colors.white),\n),\n],\n),\n),\n),\n),\n),\n],\n),\n],\n),\n),\n),\n);\n</code></pre> </li> <li> <p>Coba jalankan proyek dan kamu telah berhasil membuat widget sederhana pada aplikasi Flutter. Aplikasi akan tampil seperti tangkapan layar di bawah ini.</p> </li> </ol> <p></p> <p></p>"},{"location":"tutorial/tutorial-6/#akhir-kata","title":"Akhir Kata","text":"<p>Selamat, kamu telah membuat aplikasi Flutter pertamamu!</p> <p>Setelah kamu menyelesaikan seluruh tutorial di atas, harapannya kini kamu lebih paham dan ke depannya kamu dapat lebih banyak bereksplorasi dengan framework Flutter dalam membuat sebuah aplikasi multiplatform.</p> <p>Sebagai contoh, kamu dapat mengeksplorasi built-in icons pada Flutter di sini.</p> <p>Jangan lupa untuk mengumpulkan tautan repositori kamu ke slot submisi yang ada pada Scele, ya.</p> <p>Happy coding!</p>"},{"location":"tutorial/tutorial-6/#credits","title":"Credits","text":"<p>Tutorial ini dikembangkan berdasarkan PBP Ganjil 2023 yang ditulis oleh Tim Pengajar Pemrograman Berbasis Platform 2023. Segala tutorial serta instruksi yang dicantumkan pada repositori ini dirancang sedemikian rupa sehingga mahasiswa yang sedang mengambil mata kuliah Pemrograman Berbasis Platform dapat menyelesaikan tutorial saat sesi lab berlangsung.</p>"},{"location":"tutorial/tutorial-7/","title":"Lab 7: Flutter Navigation, Input, dan Form","text":"<p>Pemrograman Berbasis Platform (CSGE602022) - diselenggarakan oleh Fakultas Ilmu Komputer, Universitas Indonesia, Semester Genap 2022/2023</p>"},{"location":"tutorial/tutorial-7/#tujuan-pembelajaran","title":"Tujuan Pembelajaran","text":"<p>Setelah menyelesaikan tutorial ini, mahasiswa diharapkan untuk:</p> <ul> <li>Memahami elemen input dan form pada Flutter.</li> <li>Memahami navigasi dan routing dasar pada Flutter.</li> <li>Memahami alur pembuatan form dan data pada Flutter.</li> <li>Memahami clean architecture pada kode Flutter.</li> </ul>"},{"location":"tutorial/tutorial-7/#navigasi-halaman-pada-flutter","title":"Navigasi Halaman pada Flutter","text":"<p>Pada saat belajar pengembangan web, kalian pasti sudah belajar bahwa dalam sebuah website kita dapat berpindah-pindah halaman sesuai dengan url yang diakses. Begitu juga pada sebuah aplikasi, kita dapat melakukan perpindahan dari satu halaman ke halaman lain. Bedanya, pada sebuah aplikasi, yang kita gunakan untuk berpindah bukanlah dengan mengakses url.</p> <p>Flutter menyediakan sistem yang cukup lengkap untuk melakukan navigasi antar halaman. Salah satu cara yang dapat kita gunakan untuk berpindah-pindah halaman adalah dengan menggunakan widget <code>Navigator</code>. Widget <code>Navigator</code> menampilkan layar seakan sebagai sebuah tumpukan (stack). Untuk menavigasi sebuah halaman baru, kita dapat mengakses <code>Navigator</code> melalui <code>BuildContext</code> dan memanggil fungsi <code>push()</code> atau <code>pop()</code>. Berikut contoh penggunaan <code>Navigator</code>.</p> <pre><code>...\nonPressed: () {\nNavigator.of(context).push(\nMaterialPageRoute(\nbuilder: (context) =&gt; const MyNewScreen(myProp: prop),\n),\n);\n},\nchild: Text(myProp.someValue),\n...\n</code></pre> <p>Untuk mengetahui lebih dalam terkait <code>Navigator</code>, dapat dibaca pada tautan berikut: https://api.flutter.dev/flutter/widgets/Navigator-class.html</p>"},{"location":"tutorial/tutorial-7/#input-dan-form-pada-flutter","title":"Input dan Form pada Flutter","text":"<p>Sama halnya dengan sebuah web, sebuah aplikasi juga dapat berinteraksi dengan pengguna melalui input dan form. Flutter memiliki widget <code>Form</code> yang dapat kita manfaatkan untuk menjadi wadah bagi beberapa input field widget yang kita buat. Sama hal nya dengan input field pada web, Flutter juga memiliki banyak tipe input field, salah satunya widget <code>TextField</code>.</p> <p>Untuk mencoba sampel dari widget <code>Form</code>, jalankan perintah berikut:</p> <pre><code>flutter create --sample=widgets.Form.1 formSample\n</code></pre> <p>Untuk mengetahui lebih lanjut terkait widget <code>Form</code>, dapat dibaca pada tautan berikut: https://api.flutter.dev/flutter/widgets/Form-class.html.</p>"},{"location":"tutorial/tutorial-7/#tutorial-melakukan-refactoring-pada-halaman-menu","title":"Tutorial: Melakukan Refactoring pada Halaman Menu","text":"<p>Sebelum kita terjun ke dalam bagian kode program, kita akan melakukan refactoring struktur proyek kita terlebih dahulu. Hal ini dilakukan agar kode program lebih terstruktur. Dalam dunia nyata, praktik ini disebut dengan clean architecture.</p> <p>Ikuti langkah-langkah berikut untuk menerapkan prinsip clean architecture pada proyekmu.</p> <ol> <li> <p>Buka proyek yang sebelumnya telah dibuat pada tutorial 6 dengan menggunakan IDE favoritmu.</p> </li> <li> <p>Buatlah sebuah folder baru dengan nama <code>pages</code> pada folder <code>lib</code>. Folder ini akan digunakan untuk menyimpan halaman-halaman dari aplikasimu.</p> </li> <li> <p>Pindahkan halaman menu (<code>menu.dart</code>) yang sudah dibuat pada tutorial 6 ke dalam folder <code>lib/pages</code>.</p> </li> <li> <p>Ubah bagian <code>import 'package:money_tracker/menu.dart';</code> menjadi <code>import 'package:money_tracker/pages/menu.dart';</code>.</p> </li> <li> <p>Coba jalankan aplikasimu; jika tidak ada error, maka kamu telah berhasil melakukan simple refactoring.</p> </li> </ol>"},{"location":"tutorial/tutorial-7/#tutorial-membuat-dan-menambahkan-drawer","title":"Tutorial: Membuat dan Menambahkan Drawer","text":"<p>Setelah melakukan refactoring, kita akan menambahkan drawer/hamburger menu. Menu ini berguna bagi para pengguna aplikasi untuk mengakses fitur-fitur yang ada pada aplikasi tanpa harus kembali ke homepage untuk mengakses menu.</p> <ol> <li> <p>Buatlah sebuah folder baru dengan nama <code>widgets</code> pada folder <code>lib</code>. Folder ini akan digunakan untuk menyimpan widgets pada aplikasimu.</p> </li> <li> <p>Buatlah sebuah file baru dengan nama <code>drawer.dart</code> pada folder <code>lib/widgets</code>.</p> </li> <li> <p>Import beberapa file yang akan digunakan ke dalam <code>drawer.dart</code>.</p> <pre><code>import 'package:money_tracker/pages/menu.dart';\nimport 'package:flutter/material.dart';\n</code></pre> </li> <li> <p>Tambahkan kode berikut pada <code>drawer.dart</code>.</p> <pre><code>class DrawerMenu extends StatelessWidget {\nconst DrawerMenu({Key? key}) : super(key: key);\n@override\nWidget build(BuildContext context) {\nreturn Drawer(\nchild: Column(\nchildren: [          ],\n),\n);\n}\n}\n</code></pre> </li> <li> <p>Tambahkan halaman menu yang akan dimunculkan pada drawer/hamburger menu dalam bentuk <code>ListTile</code>.</p> <pre><code>...\nchild: Column(\nchildren: [\n// Menambahkan clickable menu\nListTile(\ntitle: const Text('Menu'),\nonTap: () {\n// Route menu ke halaman utama\nNavigator.pushReplacement(\ncontext,\nMaterialPageRoute(builder: (context) =&gt; const MyHomePage()),\n);\n},\n),\n...\n</code></pre> </li> <li> <p>Buka <code>pages/menu.dart</code> dan tambahkan drawer ke halaman tersebut dengan menambahkan potongan kode berikut.</p> <pre><code>...\nappBar: AppBar(\ntitle: const Text(\n'Money Tracker',\n),\n),\ndrawer: const DrawerMenu(), // Menambahkan drawer pada halaman\nbody: SingleChildScrollView(\n...\n</code></pre> </li> <li> <p>Jalankan aplikasimu dan drawer/hamburger menu sudah muncul pada bagian kiri atas halaman menu.</p> </li> </ol>"},{"location":"tutorial/tutorial-7/#tutorial-membuat-halaman-form","title":"Tutorial: Membuat Halaman Form","text":"<p>Setelah membuat menu, kita akan membuat halaman form yang akan menerima input data dari pengguna. Untuk sekarang, kita hanya akan membuat halaman form dan menampilkan datanya secara lokal. Integrasi aplikasi Flutter dengan layanan Django akan dibahas pada lab berikutnya.</p> <ol> <li> <p>Buatlah file baru pada folder <code>lib/pages</code> dengan nama <code>form.dart</code>.</p> </li> <li> <p>Tambahkan boilerplate berikut ke dalam file tersebut.</p> <pre><code>class MyFormPage extends StatefulWidget {\nconst MyFormPage({super.key});\n@override\nState&lt;MyFormPage&gt; createState() =&gt; _MyFormPageState();\n}\nclass _MyFormPageState extends State&lt;MyFormPage&gt; {\n@override\nWidget build(BuildContext context) {\nreturn Scaffold(\nappBar: AppBar(\ntitle: Text('Form'),\n),\ndrawer: const DrawerMenu(),\nbody: Center(\nchild: Column(\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: &lt;Widget&gt;[\nText('Hello World!'),\n],\n),\n),\n);\n}\n}\n</code></pre> </li> <li> <p>Tambahkan impor pada kode berikut.</p> <p><code>/lib/pages/form.dart</code></p> <pre><code>import 'package:money_tracker/widgets/drawer.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n...\n</code></pre> <p><code>/lib/pages/menu.dart</code></p> <pre><code>import 'package:money_tracker/pages/form.dart';\n...\n</code></pre> <p><code>lib/widgets/dart.dart</code></p> <pre><code>import 'package:money_tracker/pages/form.dart';\n</code></pre> </li> <li> <p>Ubah fungsi tombol <code>Tambah Transaksi</code> pada <code>lib/pages/menu.dart</code> agar mengarahkan ke halaman <code>MyFormPage</code>. Kamu dapat melakukan redirection dengan menambahkan kode berikut pada bagian <code>onTap: () { }</code> yang ada pada <code>Container</code> tombol <code>Tambah Transaksi</code> pada <code>MyHomePage</code>.</p> <pre><code>...\nContainer(\n...\nonTap: () {\nNavigator.pushReplacement(\ncontext,\nMaterialPageRoute(\nbuilder: (context) =&gt; const MyFormPage()),\n);\n}\n),\n...\n</code></pre> </li> <li> <p>Coba jalankan aplikasi untuk melihat perubahan yang baru saja kamu buat. Seharusnya terdapat drawer atau hamburger menu pada pojok kiri atas dan halaman form berisi teks \u201cHello World!\u201d.</p> </li> </ol>"},{"location":"tutorial/tutorial-7/#tutorial-menambahkan-form-dan-elemen-input","title":"Tutorial: Menambahkan Form dan Elemen Input","text":"<p>Kita akan mencoba untuk menambahkan dua tipe input form yang ada di Flutter, yaitu <code>TextFormField</code> dan <code>DropdownButton</code>.</p> <ol> <li> <p>Ubah widget <code>Center</code> menjadi <code>Form</code>.</p> <pre><code>body: Form(),\n</code></pre> </li> <li> <p>Tambahkan form key sebagai handle dari state, validasi, dan penyimpanan form.</p> <pre><code>...\nclass _MyFormPageState extends State&lt;MyFormPage&gt; {\nfinal _formKey = GlobalKey&lt;FormState&gt;();\n@override\n...\nbody: Form(\nkey: _formKey,\n),\n...\n</code></pre> </li> <li> <p>Buatlah widget <code>SingleChildScrollView</code> sebagai child dari widget <code>Form</code>.</p> <pre><code>...\nbody: Form(\nkey: _formKey,\nchild: SingleChildScrollView(),\n),\n...\n</code></pre> </li> <li> <p>Buatlah widget <code>Container</code> sebagai child dari widget <code>SingleChildScrollView</code>.</p> <pre><code>...\nchild: SingleChildScrollView(\nchild: Container(),\n),\n...\n</code></pre> </li> <li> <p>Tambahkan padding pada widget <code>Container</code> agar tampilan widget menjadi rapi. Sebagai contoh, kita akan memakai padding sebesar 20 pixels.</p> <pre><code>...\nchild: Container(\npadding: const EdgeInsets.all(20.0),\n),\n...\n</code></pre> </li> <li> <p>Buatlah widget <code>Column</code> sebagai child dari widget <code>Container</code>.</p> <pre><code>...\nchild: Container(\npadding: const EdgeInsets.all(20.0),\nchild: Column(),\n),\n...\n</code></pre> </li> <li> <p>Buatlah widget <code>TextFormField</code> yang dibungkus oleh <code>Padding</code> sebagai salah satu children dari widget <code>Column</code>. Selain itu, tambahkan variabel baru sebagai placeholder dari nilai yang diketik pada <code>TextFormField</code> nantinya. Buatlah <code>TextFormField</code> sebagai penampung variabel nama transaksi. Berikut adalah contohnya.</p> <pre><code>...\nclass _MyFormPageState extends State&lt;MyFormPage&gt; {\nfinal _formKey = GlobalKey&lt;FormState&gt;();\nString _namaTransaksi = \"\";\n@override\n...\nchild: Column(\nchildren: [\nPadding(\n// Menggunakan padding sebesar 8 pixels\npadding: const EdgeInsets.all(8.0),\nchild: TextFormField(\ndecoration: InputDecoration(\nhintText: \"Contoh: Bayar UKT\",\nlabelText: \"Nama Transaksi\",\n// Menambahkan icon agar lebih intuitif\nicon: const Icon(Icons.edit_note),\n// Menambahkan circular border agar lebih rapi\nborder: OutlineInputBorder(\nborderRadius: BorderRadius.circular(5.0),\n),\n),\n// Menambahkan behavior saat nama diketik\nonChanged: (String? value) {\nsetState(() {\n_namaTransaksi = value!;\n});\n},\n// Menambahkan behavior saat data disimpan\nonSaved: (String? value) {\nsetState(() {\n_namaTransaksi = value!;\n});\n},\n// Validator sebagai validasi form\nvalidator: (String? value) {\nif (value == null || value.isEmpty) {\nreturn 'Nama transaksi tidak boleh kosong!';\n}\nreturn null;\n},\n),\n),\n...\n</code></pre> </li> <li> <p>Buatlah widget <code>DropdownButton</code> sebagai salah satu children dari widget <code>Column</code>. Tambahkan variabel baru sebagai placeholder dari nilai dropdown nantinya. Selain itu, tambahkan pula <code>List</code> of <code>String</code> yang menampung opsi yang akan ditampilkan pada dropdown. Berikut adalah contohnya.</p> <pre><code>...\nString tipeTransaksi = 'Pengeluaran';\nList&lt;String&gt; listTipeTransaksi = ['Pengeluaran', 'Pemasukan'];\n@override\n...\nListTile(\nleading: const Icon(Icons.class_),\ntitle: const Text(\n'Tipe Transaksi:',\n),\ntrailing: DropdownButton(\nvalue: tipeTransaksi,\nicon: const Icon(Icons.keyboard_arrow_down),\nitems: listTipeTransaksi.map((String items) {\nreturn DropdownMenuItem(\nvalue: items,\nchild: Text(items),\n);\n}).toList(),\nonChanged: (String? newValue) {\nsetState(() {\ntipeTransaksi = newValue!;\n});\n},\n),\n),\n...\n</code></pre> </li> <li> <p>Buatlah widget T<code>extFormField</code> yang dibungkus oleh <code>Padding</code> sebagai salah satu children dari widget <code>Column</code>. Selain itu, tambahkan variabel baru sebagai placeholder dari nilai yang diketik pada <code>TextFormField</code> nantinya. Buatlah <code>TextFormField</code> sebagai penampung variabel jumlah transaksi. Berikut adalah contohnya.</p> <pre><code>...\ndouble jumlahTransaksi = 0;\n@override\n...\nPadding(\n// Menggunakan padding sebesar 8 pixels\npadding: const EdgeInsets.all(8.0),\nchild: TextFormField(\nkeyboardType: TextInputType.number,\ninputFormatters: &lt;TextInputFormatter&gt;[\nFilteringTextInputFormatter.digitsOnly\n],\ndecoration: InputDecoration(\nhintText: \"Contoh: 1000000\",\nlabelText: \"Jumlah Transaksi\",\n// Menambahkan icon agar lebih intuitif\nicon: const Icon(Icons.edit_note),\n// Menambahkan circular border agar lebih rapi\nborder: OutlineInputBorder(\nborderRadius: BorderRadius.circular(5.0),\n),\n),\n// Menambahkan behavior saat jumlah diketik\nonChanged: (String? value) {\nsetState(() {\njumlahTransaksi = double.parse(value!);\n});\n},\n// Menambahkan behavior saat data disimpan\nonSaved: (String? value) {\nsetState(() {\njumlahTransaksi = double.parse(value!);\n});\n},\n// Validator sebagai validasi form\nvalidator: (String? value) {\nif (value == null || value.isEmpty) {\nreturn 'Jumlah transaksi tidak boleh kosong!';\n}\nreturn null;\n},\n),\n),\n...\n</code></pre> </li> <li> <p>Buatlah widget <code>TextFormField</code> yang dibungkus oleh <code>Padding</code> sebagai salah satu children dari widget <code>Column</code>. Selain itu, tambahkan variabel baru sebagai placeholder dari nilai yang diketik pada <code>TextFormField</code> nantinya. Buatlah <code>TextFormField</code> sebagai penampung variabel deskripsi transaksi. Berikut adalah contohnya.</p> <pre><code>...\nString _deskripsiTransaksi = \"\";\n@override\n...\nPadding(\n// Menggunakan padding sebesar 8 pixels\npadding: const EdgeInsets.all(8.0),\nchild: TextFormField(\ndecoration: InputDecoration(\nhintText: \"Contoh: Sebelum masuk semester!\",\nlabelText: \"Deskripsi Transaksi\",\n// Menambahkan icon agar lebih intuitif\nicon: const Icon(Icons.notes),\n// Menambahkan circular border agar lebih rapi\nborder: OutlineInputBorder(\nborderRadius: BorderRadius.circular(5.0),\n),\n),\n// Menambahkan behavior saat nama diketik\nonChanged: (String? value) {\nsetState(() {\n_deskripsiTransaksi = value!;\n});\n},\n// Menambahkan behavior saat data disimpan\nonSaved: (String? value) {\nsetState(() {\n_deskripsiTransaksi = value!;\n});\n},\n// Validator sebagai validasi form\nvalidator: (String? value) {\nif (value == null || value.isEmpty) {\nreturn 'Deskripsi transaksi tidak boleh kosong!';\n}\nreturn null;\n},\n),\n),\n...\n</code></pre> </li> <li> <p>Buatlah tombol yang akan menyimpan data yang ada di setiap elemen input. Kali ini kita tidak akan menyimpan data ke dalam database, namun kita akan memunculkannya pada popup yang akan muncul setelah tombol ditekan.</p> <pre><code>          ...\nTextButton(\nchild: const Text(\n\"Tambah\",\nstyle: TextStyle(color: Colors.white),\n),\nstyle: ButtonStyle(\nbackgroundColor: MaterialStateProperty.all(Colors.blue),\n),\nonPressed: () {\nif (_formKey.currentState!.validate()) {}\n},\n),\n...\n</code></pre> </li> </ol> <p>Setelah semua input dan logika form dibuat, maka kita akan membuat popup yang akan memunculkan data yang ada pada input form saat tombol <code>Tambah</code> ditekan.</p>"},{"location":"tutorial/tutorial-7/#tutorial-memunculkan-data","title":"Tutorial: Memunculkan Data","text":"<ol> <li> <p>Tambahkan fungsi <code>showDialog()</code> pada bagian <code>onPressed()</code> dan munculkan widget <code>Dialog</code> pada fungsi tersebut. Berikut adalah contoh potongan kodenya.</p> <pre><code>...\nonPressed: () {\nif (_formKey.currentState!.validate()) {\nshowDialog(\ncontext: context,\nbuilder: (context) {\nreturn Dialog(\nshape: RoundedRectangleBorder(\nborderRadius: BorderRadius.circular(10),\n),\nelevation: 15,\nchild: Container(\nchild: ListView(\npadding: const EdgeInsets.only(top: 20, bottom: 20),\nshrinkWrap: true,\nchildren: &lt;Widget&gt;[\nCenter(child: const Text('Informasi Data')),\nSizedBox(height: 20),\n// TODO: Munculkan informasi yang didapat dari form\nTextButton(\nonPressed: () {\nNavigator.pop(context);\n},\nchild: Text('Kembali'),\n),\n],\n),\n),\n);\n},\n);\n}\n},\n...\n</code></pre> </li> <li> <p>Silakan tambahkan informasi yang didapat dari form secara mandiri. Kamu dapat menggunakan widget <code>Text</code> dan melakukan string interpolation agar keterangan data dan isi data dapat disajikan dalam satu widget. Contohnya adalah <code>Text('Nama Transaksi: $_namaTransaksi')</code>.</p> </li> <li> <p>Coba jalankan program kamu, gunakan form yang telah dibuat, dan lihat hasilnya.</p> </li> </ol>"},{"location":"tutorial/tutorial-7/#akhir-kata","title":"Akhir Kata","text":"<p>Selamat, kamu telah mempelajari navigasi dasar dan pembuatan form dasar pada Flutter!</p> <p>Setelah kamu menyelesaikan seluruh tutorial di atas, kamu dapat mencoba widget input lainnya yang ada di Flutter. Kamu juga dapat mencoba untuk membuat halaman baru dengan opsi navigasi yang berbeda, seperti <code>Navigator.push()</code> dan <code>Navigator.pop()</code>.</p> <p>Jika kamu ingin mencoba tantangan, maka cobalah untuk menerapkan hal berikut pada tutorial ini.</p> <ul> <li>Modifikasi navigasi pada Drawer agar melakukan <code>Navigator.pop()</code> apabila halaman yang ingin dibuka adalah halaman yang sedang dibuka, alih-alih mengunakan <code>Navigator.pushReplacement()</code> untuk semua navigasi.</li> <li>Kustomisasi widget-widget yang telah kamu buat sebelumnya (styling), seperti warna, ikon, dll.</li> </ul>"},{"location":"tutorial/tutorial-7/#referensi-tambahan","title":"Referensi Tambahan","text":"<ul> <li>Build a form with validation</li> <li>Input widgets</li> <li>Navigation and routing</li> </ul>"},{"location":"tutorial/tutorial-7/#credits","title":"Credits","text":"<p>Tutorial ini dikembangkan berdasarkan PBP Ganjil 2023 yang ditulis oleh Tim Pengajar Pemrograman Berbasis Platform 2023. Segala tutorial serta instruksi yang dicantumkan pada repositori ini dirancang sedemikian rupa sehingga mahasiswa yang sedang mengambil mata kuliah Pemrograman Berbasis Platform dapat menyelesaikan tutorial saat sesi lab berlangsung.</p>"}]}